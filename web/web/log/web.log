2015 Aug 31, Mon <11:16:38> log_main.py[line:19] INFO test
2015 Aug 31, Mon <03:22:03> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:22:03> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:22:03> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 03:22:03.945705'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 03:22:03.945705')
2015 Aug 31, Mon <03:22:03> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <03:22:03> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <03:26:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:26:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:26:27> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 03:26:27.100135'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 03:26:27.100135')
2015 Aug 31, Mon <03:26:27> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <03:26:27> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <03:26:31> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:26:31> utils.py[line:89] DEBUG (0.004) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('1086', 'You can Solve a Geometry Problem too', 'Many geometry（几何）problems were designed in the ACM/ICPC. And now, I also prepare a geometry problem for this final exam. According to the experience of many ACMers, geometry problems are always much trouble, but this problem is very easy, after all we are now attending an exam, not a contest :)<br>Give you N (1&lt;=N&lt;=100) segments（线段）, please output the number of all intersections（交点）. You should count repeatedly if M (M&gt;2) segments intersect at the same point.<br><br>Note:<br>You can assume that two segments would not intersect at more than one point. <br>', 'Input contains multiple test cases. Each test case contains a integer N (1=N&lt;=100) in a line first, and then N lines follow. Each line describes one segment with four float values x1, y1, x2, y2 which are coordinates of the segment’s ending. <br>A test case starting with 0 terminates the input and this test case is not to be processed.<br>', 'For each case, print the number of intersections, and one line one case.<br>', '2\r\n0.00 0.00 1.00 1.00\r\n0.00 1.00 1.00 0.00\r\n3\r\n0.00 0.00 1.00 1.00\r\n0.00 1.00 1.00 0.000\r\n0.00 0.00 1.00 0.00\r\n0', '1\r\n3', '', 'lcy', '2015-08-31', 1000, 2000, 32768, 65536, 0, 0, 0, 0, '', 'hdu', 1); args=[u'1086', 'You can Solve a Geometry Problem too', 'Many geometry\xef\xbc\x88\xe5\x87\xa0\xe4\xbd\x95\xef\xbc\x89problems were designed in the ACM/ICPC. And now, I also prepare a geometry problem for this final exam. According to the experience of many ACMers, geometry problems are always much trouble, but this problem is very easy, after all we are now attending an exam, not a contest :)<br>Give you N (1&lt;=N&lt;=100) segments\xef\xbc\x88\xe7\xba\xbf\xe6\xae\xb5\xef\xbc\x89, please output the number of all intersections\xef\xbc\x88\xe4\xba\xa4\xe7\x82\xb9\xef\xbc\x89. You should count repeatedly if M (M&gt;2) segments intersect at the same point.<br><br>Note:<br>You can assume that two segments would not intersect at more than one point. <br>', 'Input contains multiple test cases. Each test case contains a integer N (1=N&lt;=100) in a line first, and then N lines follow. Each line describes one segment with four float values x1, y1, x2, y2 which are coordinates of the segment\xe2\x80\x99s ending. <br>A test case starting with 0 terminates the input and this test case is not to be processed.<br>', 'For each case, print the number of intersections, and one line one case.<br>', '2\r\n0.00 0.00 1.00 1.00\r\n0.00 1.00 1.00 0.00\r\n3\r\n0.00 0.00 1.00 1.00\r\n0.00 1.00 1.00 0.000\r\n0.00 0.00 1.00 0.00\r\n0', '1\r\n3', '', 'lcy', u'2015-08-31', 1000, 2000, 32768, 65536, False, 0, 0, 0, '', u'hdu', 1]
2015 Aug 31, Mon <03:26:31> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 03:26:31.202270'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 03:26:31.202270')
2015 Aug 31, Mon <03:26:31> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <03:26:31> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <03:46:56> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 03:46:56.882938'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 03:46:56.882938')
2015 Aug 31, Mon <03:46:56> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <03:46:56> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <03:47:06> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:06> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:06> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 1234; args=(1234,)
2015 Aug 31, Mon <03:47:06> defaulttags.py[line:66] WARNING /Library/Python/2.7/site-packages/django/template/defaulttags.py:66: UserWarning: A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext.
  "A {% csrf_token %} was used in a template, but the context "

2015 Aug 31, Mon <03:47:09> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:09> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:09> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 1234; args=(1234,)
2015 Aug 31, Mon <03:47:12> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:12> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:12> utils.py[line:89] DEBUG (0.001) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 12; args=(12,)
2015 Aug 31, Mon <03:47:12> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 03:47:12.338400'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 03:47:12.338400')
2015 Aug 31, Mon <03:47:12> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <03:47:12> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <03:47:16> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:16> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:16> utils.py[line:89] DEBUG (0.001) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 3; args=(3,)
2015 Aug 31, Mon <03:47:16> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 03:47:16.261917'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 03:47:16.261917')
2015 Aug 31, Mon <03:47:16> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <03:47:16> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <03:47:19> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:19> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:19> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 10; args=(10,)
2015 Aug 31, Mon <03:47:19> utils.py[line:89] DEBUG (0.001) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 03:47:19.954421'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 03:47:19.954421')
2015 Aug 31, Mon <03:47:19> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <03:47:19> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <03:47:22> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:22> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:22> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 11; args=(11,)
2015 Aug 31, Mon <03:47:22> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 03:47:22.917669'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 03:47:22.917669')
2015 Aug 31, Mon <03:47:22> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <03:47:22> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <03:47:35> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:35> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:35> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 11; args=(11,)
2015 Aug 31, Mon <03:47:35> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 03:47:35.814092'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 03:47:35.814092')
2015 Aug 31, Mon <03:47:35> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <03:47:35> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <03:47:43> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:43> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:43> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 9; args=(9,)
2015 Aug 31, Mon <03:47:43> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 03:47:43.409679'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 03:47:43.409679')
2015 Aug 31, Mon <03:47:43> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <03:47:43> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <03:47:46> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:46> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:46> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 8; args=(8,)
2015 Aug 31, Mon <03:47:46> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 03:47:46.801031'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 03:47:46.801031')
2015 Aug 31, Mon <03:47:46> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <03:47:46> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <03:47:50> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:50> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:47:50> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 7; args=(7,)
2015 Aug 31, Mon <03:47:50> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 03:47:50.324618'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 03:47:50.324618')
2015 Aug 31, Mon <03:47:50> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <03:47:50> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <03:53:26> log_main.py[line:15] INFO Download image <1022-1.jpg> over
2015 Aug 31, Mon <03:53:26> log_main.py[line:15] INFO Download image <1022-2.jpg> over
2015 Aug 31, Mon <03:53:26> log_main.py[line:15] INFO Download image <1022-3.jpg> over
2015 Aug 31, Mon <03:53:26> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:53:26> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:53:26> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 03:53:26.611352'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 03:53:26.611352')
2015 Aug 31, Mon <03:53:26> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <03:53:26> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <03:54:37> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:54:37> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:54:37> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 03:54:37.995811'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 03:54:37.995811')
2015 Aug 31, Mon <03:54:37> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <03:54:38> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <03:54:41> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:54:41> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:54:41> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 03:54:41.491311'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 03:54:41.491311')
2015 Aug 31, Mon <03:54:41> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <03:54:41> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <03:54:43> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:54:43> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <03:54:43> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 03:54:43.904243'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 03:54:43.904243')
2015 Aug 31, Mon <03:54:43> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <03:54:43> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <11:49:58> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <11:49:58> utils.py[line:89] DEBUG (0.003) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('3263', 'Ancient vending machine', 'Though the story of Shaolong Xiang, the great time-traveler, is not recorded in the history, some recent discoveries show the possibility that the ancient mystery visitor might really exist. Several months ago, a strange machine was found together with some newly unearthed terra-cotta warriors. That machine looks like a modern machine and even has some electronic parts — that’s why people take Mr. Xiang into consideration when guessing the origin of the strange machine. <br><br>After careful examinations, scientists finally figured out what the machine is -- it actually is a vending machine in Qin dynasty! There is a hole on a panel of the machine, and scientists are pretty sure that Qin people put their coins into the machine through that hole to buy things. As you know, there were too many different types of coins before Qin dynasty and Emperor Qin Shihuang didn’t like that. But scientists found an announcement made by Qin Shihuang carved on the machine, saying that any coins which can go through the hole is still legal to use. Now your task is to determine whether a certain type of coin can be put into the hole—from these results we might find some clues about the mystery time-traveler.<br><br>The hole on the panel is a polygon and all coins also have a shape of polygon. THEY ALL MAYBE CONCAVE. Scientist found out that ancient people use the vending machine this way: The panel with the hole was positioned horizontally, and the customer chose a best position above the hole to hold a coin. Then the customer dropped the coin. During the process of felling down, the coin WOULD NOT ROTATE in any direction. If the coin could go through the hole, the coin is considered “legal”. Otherwise, the coin is judged “illegal”. If the coin just merely touched the edges of the hole but was not blocked, it was considered as legal. For example, as shown in the sample input, a square coin with side length 5 can go through a triangle hole with sides of length 3, 4 and 5 , so it’s legal. <br><center><img src=../../../data/images/254-1004-1.jpg></center><br>Please note that coins and the panel are all considered as no thickness. ', 'The first line contains an integer T representing the number of test cases( 0 &lt; T &lt;= 20).<br>For each test case, the first line contains an integer N (3&lt;=N&lt;=20), representing the number of vertexes of the hole-polygon. <br>Next N lines describe the shape of the hole-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r1 and r2 ( -100 &lt;= r1,r2 &lt;=100), describing the position of a vertex.<br> <br>The next line contains an integer M (3&lt;=M&lt;=20), representing the number of vertexes of the coin-polygon. <br><br>Next M lines describe the shape of the coin-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r1 and r2 ( -100 &lt;= r1,r2 &lt;=100), describing the position of a vertex.<br><br>The positions mentioned above are relative coordinates but not absolute values. <br>', 'For each test case, output one line containing either the word “legal” or the word “illegal”, which represents that the coin can or can’t go through the hole.', '2\r\n4\r\n0 0\r\n4 0\r\n4 1\r\n0 1\r\n3\r\n0 4\r\n1 4\r\n1 0\r\n3\r\n0 0\r\n4 0\r\n0 3\r\n4\r\n0 0\r\n5 0\r\n5 5\r\n0 5', 'legal\r\nlegal', '', '', '2015-08-31', 1000, 2000, 32768, 32768, 0, 0, 0, 0, '', 'hdu', 1); args=[u'3263', 'Ancient vending machine', 'Though the story of Shaolong Xiang, the great time-traveler, is not recorded in the history, some recent discoveries show the possibility that the ancient mystery visitor might really exist. Several months ago, a strange machine was found together with some newly unearthed terra-cotta warriors. That machine looks like a modern machine and even has some electronic parts \xe2\x80\x94 that\xe2\x80\x99s why people take Mr. Xiang into consideration when guessing the origin of the strange machine. <br><br>After careful examinations, scientists finally figured out what the machine is -- it actually is a vending machine in Qin dynasty! There is a hole on a panel of the machine, and scientists are pretty sure that Qin people put their coins into the machine through that hole to buy things. As you know, there were too many different types of coins before Qin dynasty and Emperor Qin Shihuang didn\xe2\x80\x99t like that. But scientists found an announcement made by Qin Shihuang carved on the machine, saying that any coins which can go through the hole is still legal to use. Now your task is to determine whether a certain type of coin can be put into the hole\xe2\x80\x94from these results we might find some clues about the mystery time-traveler.<br><br>The hole on the panel is a polygon and all coins also have a shape of polygon. THEY ALL MAYBE CONCAVE. Scientist found out that ancient people use the vending machine this way: The panel with the hole was positioned horizontally, and the customer chose a best position above the hole to hold a coin. Then the customer dropped the coin. During the process of felling down, the coin WOULD NOT ROTATE in any direction. If the coin could go through the hole, the coin is considered \xe2\x80\x9clegal\xe2\x80\x9d. Otherwise, the coin is judged \xe2\x80\x9cillegal\xe2\x80\x9d. If the coin just merely touched the edges of the hole but was not blocked, it was considered as legal. For example, as shown in the sample input, a square coin with side length 5 can go through a triangle hole with sides of length 3, 4 and 5 , so it\xe2\x80\x99s legal. <br><center><img src=../../../data/images/254-1004-1.jpg></center><br>Please note that coins and the panel are all considered as no thickness. ', 'The first line contains an integer T representing the number of test cases( 0 &lt; T &lt;= 20).<br>For each test case, the first line contains an integer N (3&lt;=N&lt;=20), representing the number of vertexes of the hole-polygon. <br>Next N lines describe the shape of the hole-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r1 and r2 ( -100 &lt;= r1,r2 &lt;=100), describing the position of a vertex.<br> <br>The next line contains an integer M (3&lt;=M&lt;=20), representing the number of vertexes of the coin-polygon. <br><br>Next M lines describe the shape of the coin-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r1 and r2 ( -100 &lt;= r1,r2 &lt;=100), describing the position of a vertex.<br><br>The positions mentioned above are relative coordinates but not absolute values. <br>', 'For each test case, output one line containing either the word \xe2\x80\x9clegal\xe2\x80\x9d or the word \xe2\x80\x9cillegal\xe2\x80\x9d, which represents that the coin can or can\xe2\x80\x99t go through the hole.', '2\r\n4\r\n0 0\r\n4 0\r\n4 1\r\n0 1\r\n3\r\n0 4\r\n1 4\r\n1 0\r\n3\r\n0 0\r\n4 0\r\n0 3\r\n4\r\n0 0\r\n5 0\r\n5 5\r\n0 5', 'legal\r\nlegal', '', '', u'2015-08-31', 1000, 2000, 32768, 32768, False, 0, 0, 0, '', u'hdu', 1]
2015 Aug 31, Mon <11:49:58> log_main.py[line:15] INFO Download image <254-1004-1.jpg> over
2015 Aug 31, Mon <11:49:58> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 11:49:58.632039'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 11:49:58.632039')
2015 Aug 31, Mon <11:49:58> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <11:49:58> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <13:14:36> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <13:14:36> utils.py[line:89] DEBUG (0.001) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('3263', 'Ancient vending machine', 'Though the story of Shaolong Xiang, the great time-traveler, is not recorded in the history, some recent discoveries show the possibility that the ancient mystery visitor might really exist. Several months ago, a strange machine was found together with some newly unearthed terra-cotta warriors. That machine looks like a modern machine and even has some electronic parts — that’s why people take Mr. Xiang into consideration when guessing the origin of the strange machine. <br><br>After careful examinations, scientists finally figured out what the machine is -- it actually is a vending machine in Qin dynasty! There is a hole on a panel of the machine, and scientists are pretty sure that Qin people put their coins into the machine through that hole to buy things. As you know, there were too many different types of coins before Qin dynasty and Emperor Qin Shihuang didn’t like that. But scientists found an announcement made by Qin Shihuang carved on the machine, saying that any coins which can go through the hole is still legal to use. Now your task is to determine whether a certain type of coin can be put into the hole—from these results we might find some clues about the mystery time-traveler.<br><br>The hole on the panel is a polygon and all coins also have a shape of polygon. THEY ALL MAYBE CONCAVE. Scientist found out that ancient people use the vending machine this way: The panel with the hole was positioned horizontally, and the customer chose a best position above the hole to hold a coin. Then the customer dropped the coin. During the process of felling down, the coin WOULD NOT ROTATE in any direction. If the coin could go through the hole, the coin is considered “legal”. Otherwise, the coin is judged “illegal”. If the coin just merely touched the edges of the hole but was not blocked, it was considered as legal. For example, as shown in the sample input, a square coin with side length 5 can go through a triangle hole with sides of length 3, 4 and 5 , so it’s legal. <br><center><img src=../../../upload/hdu/3263/254-1004-1.jpg></center><br>Please note that coins and the panel are all considered as no thickness. ', 'The first line contains an integer T representing the number of test cases( 0 &lt; T &lt;= 20).<br>For each test case, the first line contains an integer N (3&lt;=N&lt;=20), representing the number of vertexes of the hole-polygon. <br>Next N lines describe the shape of the hole-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r1 and r2 ( -100 &lt;= r1,r2 &lt;=100), describing the position of a vertex.<br> <br>The next line contains an integer M (3&lt;=M&lt;=20), representing the number of vertexes of the coin-polygon. <br><br>Next M lines describe the shape of the coin-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r1 and r2 ( -100 &lt;= r1,r2 &lt;=100), describing the position of a vertex.<br><br>The positions mentioned above are relative coordinates but not absolute values. <br>', 'For each test case, output one line containing either the word “legal” or the word “illegal”, which represents that the coin can or can’t go through the hole.', '2\r\n4\r\n0 0\r\n4 0\r\n4 1\r\n0 1\r\n3\r\n0 4\r\n1 4\r\n1 0\r\n3\r\n0 0\r\n4 0\r\n0 3\r\n4\r\n0 0\r\n5 0\r\n5 5\r\n0 5', 'legal\r\nlegal', '', '', '2015-08-31', 1000, 2000, 32768, 32768, 0, 0, 0, 0, '', 'hdu', 1); args=[u'3263', 'Ancient vending machine', 'Though the story of Shaolong Xiang, the great time-traveler, is not recorded in the history, some recent discoveries show the possibility that the ancient mystery visitor might really exist. Several months ago, a strange machine was found together with some newly unearthed terra-cotta warriors. That machine looks like a modern machine and even has some electronic parts \xe2\x80\x94 that\xe2\x80\x99s why people take Mr. Xiang into consideration when guessing the origin of the strange machine. <br><br>After careful examinations, scientists finally figured out what the machine is -- it actually is a vending machine in Qin dynasty! There is a hole on a panel of the machine, and scientists are pretty sure that Qin people put their coins into the machine through that hole to buy things. As you know, there were too many different types of coins before Qin dynasty and Emperor Qin Shihuang didn\xe2\x80\x99t like that. But scientists found an announcement made by Qin Shihuang carved on the machine, saying that any coins which can go through the hole is still legal to use. Now your task is to determine whether a certain type of coin can be put into the hole\xe2\x80\x94from these results we might find some clues about the mystery time-traveler.<br><br>The hole on the panel is a polygon and all coins also have a shape of polygon. THEY ALL MAYBE CONCAVE. Scientist found out that ancient people use the vending machine this way: The panel with the hole was positioned horizontally, and the customer chose a best position above the hole to hold a coin. Then the customer dropped the coin. During the process of felling down, the coin WOULD NOT ROTATE in any direction. If the coin could go through the hole, the coin is considered \xe2\x80\x9clegal\xe2\x80\x9d. Otherwise, the coin is judged \xe2\x80\x9cillegal\xe2\x80\x9d. If the coin just merely touched the edges of the hole but was not blocked, it was considered as legal. For example, as shown in the sample input, a square coin with side length 5 can go through a triangle hole with sides of length 3, 4 and 5 , so it\xe2\x80\x99s legal. <br><center><img src=../../../upload/hdu/3263/254-1004-1.jpg></center><br>Please note that coins and the panel are all considered as no thickness. ', 'The first line contains an integer T representing the number of test cases( 0 &lt; T &lt;= 20).<br>For each test case, the first line contains an integer N (3&lt;=N&lt;=20), representing the number of vertexes of the hole-polygon. <br>Next N lines describe the shape of the hole-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r1 and r2 ( -100 &lt;= r1,r2 &lt;=100), describing the position of a vertex.<br> <br>The next line contains an integer M (3&lt;=M&lt;=20), representing the number of vertexes of the coin-polygon. <br><br>Next M lines describe the shape of the coin-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r1 and r2 ( -100 &lt;= r1,r2 &lt;=100), describing the position of a vertex.<br><br>The positions mentioned above are relative coordinates but not absolute values. <br>', 'For each test case, output one line containing either the word \xe2\x80\x9clegal\xe2\x80\x9d or the word \xe2\x80\x9cillegal\xe2\x80\x9d, which represents that the coin can or can\xe2\x80\x99t go through the hole.', '2\r\n4\r\n0 0\r\n4 0\r\n4 1\r\n0 1\r\n3\r\n0 4\r\n1 4\r\n1 0\r\n3\r\n0 0\r\n4 0\r\n0 3\r\n4\r\n0 0\r\n5 0\r\n5 5\r\n0 5', 'legal\r\nlegal', '', '', u'2015-08-31', 1000, 2000, 32768, 32768, False, 0, 0, 0, '', u'hdu', 1]
2015 Aug 31, Mon <13:14:37> log_main.py[line:15] INFO Download image <254-1004-1.jpg> over
2015 Aug 31, Mon <13:14:37> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 13:14:37.255933'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 13:14:37.255933')
2015 Aug 31, Mon <13:14:37> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <13:14:37> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <13:15:05> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <13:15:05> utils.py[line:89] DEBUG (0.006) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('3263', 'Ancient vending machine', 'Though the story of Shaolong Xiang, the great time-traveler, is not recorded in the history, some recent discoveries show the possibility that the ancient mystery visitor might really exist. Several months ago, a strange machine was found together with some newly unearthed terra-cotta warriors. That machine looks like a modern machine and even has some electronic parts — that’s why people take Mr. Xiang into consideration when guessing the origin of the strange machine. <br><br>After careful examinations, scientists finally figured out what the machine is -- it actually is a vending machine in Qin dynasty! There is a hole on a panel of the machine, and scientists are pretty sure that Qin people put their coins into the machine through that hole to buy things. As you know, there were too many different types of coins before Qin dynasty and Emperor Qin Shihuang didn’t like that. But scientists found an announcement made by Qin Shihuang carved on the machine, saying that any coins which can go through the hole is still legal to use. Now your task is to determine whether a certain type of coin can be put into the hole—from these results we might find some clues about the mystery time-traveler.<br><br>The hole on the panel is a polygon and all coins also have a shape of polygon. THEY ALL MAYBE CONCAVE. Scientist found out that ancient people use the vending machine this way: The panel with the hole was positioned horizontally, and the customer chose a best position above the hole to hold a coin. Then the customer dropped the coin. During the process of felling down, the coin WOULD NOT ROTATE in any direction. If the coin could go through the hole, the coin is considered “legal”. Otherwise, the coin is judged “illegal”. If the coin just merely touched the edges of the hole but was not blocked, it was considered as legal. For example, as shown in the sample input, a square coin with side length 5 can go through a triangle hole with sides of length 3, 4 and 5 , so it’s legal. <br><center><img src=../../../upload/hdu/3263/254-1004-1.jpg></center><br>Please note that coins and the panel are all considered as no thickness. ', 'The first line contains an integer T representing the number of test cases( 0 &lt; T &lt;= 20).<br>For each test case, the first line contains an integer N (3&lt;=N&lt;=20), representing the number of vertexes of the hole-polygon. <br>Next N lines describe the shape of the hole-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r1 and r2 ( -100 &lt;= r1,r2 &lt;=100), describing the position of a vertex.<br> <br>The next line contains an integer M (3&lt;=M&lt;=20), representing the number of vertexes of the coin-polygon. <br><br>Next M lines describe the shape of the coin-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r1 and r2 ( -100 &lt;= r1,r2 &lt;=100), describing the position of a vertex.<br><br>The positions mentioned above are relative coordinates but not absolute values. <br>', 'For each test case, output one line containing either the word “legal” or the word “illegal”, which represents that the coin can or can’t go through the hole.', '2\r\n4\r\n0 0\r\n4 0\r\n4 1\r\n0 1\r\n3\r\n0 4\r\n1 4\r\n1 0\r\n3\r\n0 0\r\n4 0\r\n0 3\r\n4\r\n0 0\r\n5 0\r\n5 5\r\n0 5', 'legal\r\nlegal', '', '', '2015-08-31', 1000, 2000, 32768, 32768, 0, 0, 0, 0, '', 'hdu', 1); args=[u'3263', 'Ancient vending machine', 'Though the story of Shaolong Xiang, the great time-traveler, is not recorded in the history, some recent discoveries show the possibility that the ancient mystery visitor might really exist. Several months ago, a strange machine was found together with some newly unearthed terra-cotta warriors. That machine looks like a modern machine and even has some electronic parts \xe2\x80\x94 that\xe2\x80\x99s why people take Mr. Xiang into consideration when guessing the origin of the strange machine. <br><br>After careful examinations, scientists finally figured out what the machine is -- it actually is a vending machine in Qin dynasty! There is a hole on a panel of the machine, and scientists are pretty sure that Qin people put their coins into the machine through that hole to buy things. As you know, there were too many different types of coins before Qin dynasty and Emperor Qin Shihuang didn\xe2\x80\x99t like that. But scientists found an announcement made by Qin Shihuang carved on the machine, saying that any coins which can go through the hole is still legal to use. Now your task is to determine whether a certain type of coin can be put into the hole\xe2\x80\x94from these results we might find some clues about the mystery time-traveler.<br><br>The hole on the panel is a polygon and all coins also have a shape of polygon. THEY ALL MAYBE CONCAVE. Scientist found out that ancient people use the vending machine this way: The panel with the hole was positioned horizontally, and the customer chose a best position above the hole to hold a coin. Then the customer dropped the coin. During the process of felling down, the coin WOULD NOT ROTATE in any direction. If the coin could go through the hole, the coin is considered \xe2\x80\x9clegal\xe2\x80\x9d. Otherwise, the coin is judged \xe2\x80\x9cillegal\xe2\x80\x9d. If the coin just merely touched the edges of the hole but was not blocked, it was considered as legal. For example, as shown in the sample input, a square coin with side length 5 can go through a triangle hole with sides of length 3, 4 and 5 , so it\xe2\x80\x99s legal. <br><center><img src=../../../upload/hdu/3263/254-1004-1.jpg></center><br>Please note that coins and the panel are all considered as no thickness. ', 'The first line contains an integer T representing the number of test cases( 0 &lt; T &lt;= 20).<br>For each test case, the first line contains an integer N (3&lt;=N&lt;=20), representing the number of vertexes of the hole-polygon. <br>Next N lines describe the shape of the hole-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r1 and r2 ( -100 &lt;= r1,r2 &lt;=100), describing the position of a vertex.<br> <br>The next line contains an integer M (3&lt;=M&lt;=20), representing the number of vertexes of the coin-polygon. <br><br>Next M lines describe the shape of the coin-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r1 and r2 ( -100 &lt;= r1,r2 &lt;=100), describing the position of a vertex.<br><br>The positions mentioned above are relative coordinates but not absolute values. <br>', 'For each test case, output one line containing either the word \xe2\x80\x9clegal\xe2\x80\x9d or the word \xe2\x80\x9cillegal\xe2\x80\x9d, which represents that the coin can or can\xe2\x80\x99t go through the hole.', '2\r\n4\r\n0 0\r\n4 0\r\n4 1\r\n0 1\r\n3\r\n0 4\r\n1 4\r\n1 0\r\n3\r\n0 0\r\n4 0\r\n0 3\r\n4\r\n0 0\r\n5 0\r\n5 5\r\n0 5', 'legal\r\nlegal', '', '', u'2015-08-31', 1000, 2000, 32768, 32768, False, 0, 0, 0, '', u'hdu', 1]
2015 Aug 31, Mon <13:15:05> log_main.py[line:15] INFO Download image <254-1004-1.jpg> over
2015 Aug 31, Mon <13:15:05> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 13:15:05.694412'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 13:15:05.694412')
2015 Aug 31, Mon <13:15:05> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <13:15:05> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <13:15:21> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <13:15:21> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <13:15:21> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 15; args=(15,)
2015 Aug 31, Mon <13:15:21> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 13:15:21.162609'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 13:15:21.162609')
2015 Aug 31, Mon <13:15:21> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <13:15:21> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <13:15:23> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <13:15:23> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <13:15:23> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 16; args=(16,)
2015 Aug 31, Mon <13:15:23> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 13:15:23.762629'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 13:15:23.762629')
2015 Aug 31, Mon <13:15:23> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <13:15:23> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <13:15:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <13:15:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <13:15:27> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 17; args=(17,)
2015 Aug 31, Mon <13:15:27> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 13:15:27.393772'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 13:15:27.393772')
2015 Aug 31, Mon <13:15:27> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <13:15:27> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Aug 31, Mon <13:15:30> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <13:15:30> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Aug 31, Mon <13:15:30> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 18; args=(18,)
2015 Aug 31, Mon <13:15:30> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-08-31 13:15:30.909385'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-08-31 13:15:30.909385')
2015 Aug 31, Mon <13:15:30> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 16; args=(16,)
2015 Aug 31, Mon <13:15:30> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 16; args=(16,)
2015 Sep 01, Tue <02:26:51> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:26:51> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:26:51> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 18; args=(18,)
2015 Sep 01, Tue <02:26:51> defaulttags.py[line:66] WARNING /Library/Python/2.7/site-packages/django/template/defaulttags.py:66: UserWarning: A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext.
  "A {% csrf_token %} was used in a template, but the context "

2015 Sep 01, Tue <02:26:56> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:26:56> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:26:56> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 1; args=(1,)
2015 Sep 01, Tue <02:26:57> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:26:57> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:26:57> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'j8fapehdhz4s86p5g7sefy0ttzqa3lxl' AND `django_session`.`expire_date` > '2015-09-01 02:26:57.663923'); args=('j8fapehdhz4s86p5g7sefy0ttzqa3lxl', u'2015-09-01 02:26:57.663923')
2015 Sep 01, Tue <02:27:04> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:27:04> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:27:04> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`username` = 'neau'; args=(u'neau',)
2015 Sep 01, Tue <02:27:22> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:27:22> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:27:22> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`username` = 'neau'; args=(u'neau',)
2015 Sep 01, Tue <02:27:22> utils.py[line:89] DEBUG (0.001) INSERT INTO `auth_user` (`password`, `last_login`, `is_superuser`, `username`, `first_name`, `last_name`, `email`, `is_staff`, `is_active`, `date_joined`) VALUES ('pbkdf2_sha256$20000$RSwDdWLEnY07$CA0XO/Ol1FuxTiW/udPA4lho6Y09AS/60hhRCp/qEng=', NULL, 0, 'neau', '', '', '123@123.com', 0, 1, '2015-09-01 02:27:22.829010'); args=[u'pbkdf2_sha256$20000$RSwDdWLEnY07$CA0XO/Ol1FuxTiW/udPA4lho6Y09AS/60hhRCp/qEng=', None, False, u'neau', u'', u'', u'123@123.com', False, True, u'2015-09-01 02:27:22.829010']
2015 Sep 01, Tue <02:27:22> utils.py[line:89] DEBUG (0.000) INSERT INTO `users_info` (`user_id`, `nickname`, `submit`, `solve`, `submit_in`, `solve_in`, `submit_out`, `solve_out`, `school`, `grade`, `team`) VALUES (1, 'NEAU', 0, 0, 0, 0, 0, 0, 'neau', 2013, 0); args=[1, u'NEAU', 0, 0, 0, 0, 0, 0, u'neau', 2013, False]
2015 Sep 01, Tue <02:27:26> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:27:26> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:27:26> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`username` = 'neau'; args=(u'neau',)
2015 Sep 01, Tue <02:27:27> utils.py[line:89] DEBUG (0.000) SELECT (1) AS `a` FROM `django_session` WHERE `django_session`.`session_key` = 'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok' LIMIT 1; args=(u'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok',)
2015 Sep 01, Tue <02:27:27> utils.py[line:89] DEBUG (0.001) INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES ('hi4j3kxt4nwt0qzr1qbti5q9tbabgaok', 'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', '2015-09-15 02:27:27.040253'); args=(u'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok', u'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', u'2015-09-15 02:27:27.040253')
2015 Sep 01, Tue <02:27:27> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE `django_session`.`session_key` = 'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok'; args=(u'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok',)
2015 Sep 01, Tue <02:27:27> utils.py[line:89] DEBUG (0.000) DELETE FROM `django_session` WHERE `django_session`.`session_key` IN ('hi4j3kxt4nwt0qzr1qbti5q9tbabgaok'); args=(u'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok',)
2015 Sep 01, Tue <02:27:27> utils.py[line:89] DEBUG (0.000) UPDATE `auth_user` SET `last_login` = '2015-09-01 02:27:27.044180' WHERE `auth_user`.`id` = 1; args=(u'2015-09-01 02:27:27.044180', 1)
2015 Sep 01, Tue <02:27:27> utils.py[line:89] DEBUG (0.000) UPDATE `django_session` SET `session_data` = 'ZmFiYmU4YjE0NDkyM2I2NzY5ZThmOTVkMGQ0YTI4ZmY5OTFiZjI3NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhZGQ2MzZmZTczMTFkY2NiOTI0M2ZkMTM4NjllNThjNGEwOTQ2YzkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', `expire_date` = '2015-09-15 02:27:27.045912' WHERE `django_session`.`session_key` = 'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok'; args=(u'ZmFiYmU4YjE0NDkyM2I2NzY5ZThmOTVkMGQ0YTI4ZmY5OTFiZjI3NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhZGQ2MzZmZTczMTFkY2NiOTI0M2ZkMTM4NjllNThjNGEwOTQ2YzkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', u'2015-09-15 02:27:27.045912', u'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok')
2015 Sep 01, Tue <02:27:27> utils.py[line:89] DEBUG (0.000) INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES ('hi4j3kxt4nwt0qzr1qbti5q9tbabgaok', 'ZmFiYmU4YjE0NDkyM2I2NzY5ZThmOTVkMGQ0YTI4ZmY5OTFiZjI3NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhZGQ2MzZmZTczMTFkY2NiOTI0M2ZkMTM4NjllNThjNGEwOTQ2YzkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2015-09-15 02:27:27.045912'); args=(u'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok', u'ZmFiYmU4YjE0NDkyM2I2NzY5ZThmOTVkMGQ0YTI4ZmY5OTFiZjI3NDp7Il9hdXRoX3VzZXJfaGFzaCI6IjBhZGQ2MzZmZTczMTFkY2NiOTI0M2ZkMTM4NjllNThjNGEwOTQ2YzkiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', u'2015-09-15 02:27:27.045912')
2015 Sep 01, Tue <02:27:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:27:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:27:27> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok' AND `django_session`.`expire_date` > '2015-09-01 02:27:27.053939'); args=('hi4j3kxt4nwt0qzr1qbti5q9tbabgaok', u'2015-09-01 02:27:27.053939')
2015 Sep 01, Tue <02:27:27> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 01, Tue <02:27:27> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 01, Tue <02:27:29> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:27:29> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:27:29> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`username` = 'neau'; args=(u'neau',)
2015 Sep 01, Tue <02:27:29> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok' AND `django_session`.`expire_date` > '2015-09-01 02:27:29.439760'); args=('hi4j3kxt4nwt0qzr1qbti5q9tbabgaok', u'2015-09-01 02:27:29.439760')
2015 Sep 01, Tue <02:27:29> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 01, Tue <02:27:29> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 01, Tue <02:27:29> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 01, Tue <02:27:33> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:27:33> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:27:33> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok' AND `django_session`.`expire_date` > '2015-09-01 02:27:33.520682'); args=('hi4j3kxt4nwt0qzr1qbti5q9tbabgaok', u'2015-09-01 02:27:33.520682')
2015 Sep 01, Tue <02:27:33> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 01, Tue <02:27:33> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 01, Tue <02:35:18> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:35:18> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:35:18> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok' AND `django_session`.`expire_date` > '2015-09-01 02:35:18.129759'); args=('hi4j3kxt4nwt0qzr1qbti5q9tbabgaok', u'2015-09-01 02:35:18.129759')
2015 Sep 01, Tue <02:35:18> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 01, Tue <02:35:18> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 01, Tue <02:35:21> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:35:21> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:35:21> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok' AND `django_session`.`expire_date` > '2015-09-01 02:35:21.597021'); args=('hi4j3kxt4nwt0qzr1qbti5q9tbabgaok', u'2015-09-01 02:35:21.597021')
2015 Sep 01, Tue <02:35:21> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 01, Tue <02:35:21> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 01, Tue <02:35:25> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:35:25> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:35:25> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1085' AND `problem_problem`.`oj` = 'hdu'); args=(u'1085', u'hdu')
2015 Sep 01, Tue <02:35:25> utils.py[line:89] DEBUG (0.001) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('1085', 'Holding Bin-Laden Captive!', 'We all know that Bin-Laden is a notorious terrorist, and he has disappeared for a long time. But recently, it is reported that he hides in Hang Zhou of China! <br>“Oh, God! How terrible! ”<br><br><center><img src=../upload/hdu/1085/1085_1.jpg></center><br><br>Don’t be so afraid, guys. Although he hides in a cave of Hang Zhou, he dares not to go out. Laden is so bored recent years that he fling himself into some math problems, and he said that if anyone can solve his problem, he will give himself up! <br>Ha-ha! Obviously, Laden is too proud of his intelligence! But, what is his problem?<br>“Given some Chinese Coins (硬币) (three kinds-- 1, 2, 5), and their number is num_1, num_2 and num_5 respectively, please output the minimum value that you cannot pay with given coins.”<br>You, super ACMer, should solve the problem easily, and don’t forget to take $25000000 from Bush!<br>', 'Input contains multiple test cases. Each test case contains 3 positive integers num_1, num_2 and num_5 (0&lt;=num_i&lt;=1000). A test case containing 0 0 0 terminates the input and this test case is not to be processed.<br>', 'Output the minimum positive value that one cannot pay with given coins, one line for one case.<br>', '1 1 3\r\n0 0 0', '4', '', 'lcy', '2015-09-01', 1000, 2000, 32768, 65536, 0, 0, 0, 0, '', 'hdu', 1); args=[u'1085', 'Holding Bin-Laden Captive!', 'We all know that Bin-Laden is a notorious terrorist, and he has disappeared for a long time. But recently, it is reported that he hides in Hang Zhou of China! <br>\xe2\x80\x9cOh, God! How terrible! \xe2\x80\x9d<br><br><center><img src=../upload/hdu/1085/1085_1.jpg></center><br><br>Don\xe2\x80\x99t be so afraid, guys. Although he hides in a cave of Hang Zhou, he dares not to go out. Laden is so bored recent years that he fling himself into some math problems, and he said that if anyone can solve his problem, he will give himself up! <br>Ha-ha! Obviously, Laden is too proud of his intelligence! But, what is his problem?<br>\xe2\x80\x9cGiven some Chinese Coins (\xe7\xa1\xac\xe5\xb8\x81) (three kinds-- 1, 2, 5), and their number is num_1, num_2 and num_5 respectively, please output the minimum value that you cannot pay with given coins.\xe2\x80\x9d<br>You, super ACMer, should solve the problem easily, and don\xe2\x80\x99t forget to take $25000000 from Bush!<br>', 'Input contains multiple test cases. Each test case contains 3 positive integers num_1, num_2 and num_5 (0&lt;=num_i&lt;=1000). A test case containing 0 0 0 terminates the input and this test case is not to be processed.<br>', 'Output the minimum positive value that one cannot pay with given coins, one line for one case.<br>', '1 1 3\r\n0 0 0', '4', '', 'lcy', u'2015-09-01', 1000, 2000, 32768, 65536, False, 0, 0, 0, '', u'hdu', 1]
2015 Sep 01, Tue <02:35:26> log_main.py[line:15] INFO Download image <1085_1.jpg> over
2015 Sep 01, Tue <02:35:26> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok' AND `django_session`.`expire_date` > '2015-09-01 02:35:26.048146'); args=('hi4j3kxt4nwt0qzr1qbti5q9tbabgaok', u'2015-09-01 02:35:26.048146')
2015 Sep 01, Tue <02:35:26> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 01, Tue <02:35:26> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 01, Tue <02:36:01> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:36:01> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:36:01> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 1; args=(1,)
2015 Sep 01, Tue <02:36:01> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok' AND `django_session`.`expire_date` > '2015-09-01 02:36:01.063833'); args=('hi4j3kxt4nwt0qzr1qbti5q9tbabgaok', u'2015-09-01 02:36:01.063833')
2015 Sep 01, Tue <02:36:01> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 01, Tue <02:36:01> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 01, Tue <02:52:45> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:52:45> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:52:45> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1055' AND `problem_problem`.`oj` = 'hdu'); args=(u'1055', u'hdu')
2015 Sep 01, Tue <02:52:45> utils.py[line:89] DEBUG (0.001) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('1055', 'Color a Tree', 'Bob is very interested in the data structure of a tree. A tree is a directed graph in which a special node is singled out, called the &quot;root&quot; of the tree, and there is a unique path from the root to each of the other nodes. <br><br>Bob intends to color all the nodes of a tree with a pen. A tree has N nodes, these nodes are numbered 1, 2, ..., N. Suppose coloring a node takes 1 unit of time, and after finishing coloring one node, he is allowed to color another. Additionally, he is allowed to color a node only when its father node has been colored. Obviously, Bob is only allowed to color the root in the first try. <br><br>Each node has a “coloring cost factor”, Ci. The coloring cost of each node depends both on Ci and the time at which Bob finishes the coloring of this node. At the beginning, the time is set to 0. If the finishing time of coloring node i is Fi, then the coloring cost of node i is Ci * Fi. <br><br>For example, a tree with five nodes is shown in Figure-1. The coloring cost factors of each node are 1, 2, 1, 2 and 4. Bob can color the tree in the order 1, 3, 5, 2, 4, with the minimum total coloring cost of 33.<br><br><img src=//upload/hdu/1055/1055-1.jpg><br><br>Given a tree and the coloring cost factor of each node, please help Bob to find the minimum possible total coloring cost for coloring all the nodes.<br>', 'The input consists of several test cases. The first line of each case contains two integers N and R (1 &lt;= N &lt;= 1000, 1 &lt;= R &lt;= N), where N is the number of nodes in the tree and R is the node number of the root node. The second line contains N integers, the i-th of which is Ci (1 &lt;= Ci &lt;= 500), the coloring cost factor of node i. Each of the next N-1 lines contains two space-separated node numbers V1 and V2, which are the endpoints of an edge in the tree, denoting that V1 is the father node of V2. No edge will be listed twice, and all edges will be listed. <br><br>A test case of N = 0 and R = 0 indicates the end of input, and should not be processed. <br>', 'For each test case, output a line containing the minimum total coloring cost required for Bob to color all the nodes.<br>', '5 1\r\n1 2 1 2 4\r\n1 2\r\n1 3\r\n2 4\r\n3 5\r\n0 0', '33', '', '', '2015-09-01', 1000, 2000, 32768, 65536, 0, 0, 0, 0, '', 'hdu', 1); args=[u'1055', 'Color a Tree', 'Bob is very interested in the data structure of a tree. A tree is a directed graph in which a special node is singled out, called the &quot;root&quot; of the tree, and there is a unique path from the root to each of the other nodes. <br><br>Bob intends to color all the nodes of a tree with a pen. A tree has N nodes, these nodes are numbered 1, 2, ..., N. Suppose coloring a node takes 1 unit of time, and after finishing coloring one node, he is allowed to color another. Additionally, he is allowed to color a node only when its father node has been colored. Obviously, Bob is only allowed to color the root in the first try. <br><br>Each node has a \xe2\x80\x9ccoloring cost factor\xe2\x80\x9d, Ci. The coloring cost of each node depends both on Ci and the time at which Bob finishes the coloring of this node. At the beginning, the time is set to 0. If the finishing time of coloring node i is Fi, then the coloring cost of node i is Ci * Fi. <br><br>For example, a tree with five nodes is shown in Figure-1. The coloring cost factors of each node are 1, 2, 1, 2 and 4. Bob can color the tree in the order 1, 3, 5, 2, 4, with the minimum total coloring cost of 33.<br><br><img src=//upload/hdu/1055/1055-1.jpg><br><br>Given a tree and the coloring cost factor of each node, please help Bob to find the minimum possible total coloring cost for coloring all the nodes.<br>', 'The input consists of several test cases. The first line of each case contains two integers N and R (1 &lt;= N &lt;= 1000, 1 &lt;= R &lt;= N), where N is the number of nodes in the tree and R is the node number of the root node. The second line contains N integers, the i-th of which is Ci (1 &lt;= Ci &lt;= 500), the coloring cost factor of node i. Each of the next N-1 lines contains two space-separated node numbers V1 and V2, which are the endpoints of an edge in the tree, denoting that V1 is the father node of V2. No edge will be listed twice, and all edges will be listed. <br><br>A test case of N = 0 and R = 0 indicates the end of input, and should not be processed. <br>', 'For each test case, output a line containing the minimum total coloring cost required for Bob to color all the nodes.<br>', '5 1\r\n1 2 1 2 4\r\n1 2\r\n1 3\r\n2 4\r\n3 5\r\n0 0', '33', '', '', u'2015-09-01', 1000, 2000, 32768, 65536, False, 0, 0, 0, '', u'hdu', 1]
2015 Sep 01, Tue <02:52:45> log_main.py[line:15] INFO Download image <1055-1.jpg> over
2015 Sep 01, Tue <02:52:45> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok' AND `django_session`.`expire_date` > '2015-09-01 02:52:45.837235'); args=('hi4j3kxt4nwt0qzr1qbti5q9tbabgaok', u'2015-09-01 02:52:45.837235')
2015 Sep 01, Tue <02:52:45> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 01, Tue <02:52:45> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 01, Tue <02:53:15> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:53:15> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:53:15> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1055' AND `problem_problem`.`oj` = 'hdu'); args=(u'1055', u'hdu')
2015 Sep 01, Tue <02:53:18> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:53:18> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:53:18> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1055' AND `problem_problem`.`oj` = 'hdu'); args=(u'1055', u'hdu')
2015 Sep 01, Tue <02:53:22> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:53:22> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:53:22> utils.py[line:89] DEBUG (0.001) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1055' AND `problem_problem`.`oj` = 'hdu'); args=(u'1055', u'hdu')
2015 Sep 01, Tue <02:54:19> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:54:19> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:54:19> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'hi4j3kxt4nwt0qzr1qbti5q9tbabgaok' AND `django_session`.`expire_date` > '2015-09-01 02:54:19.823598'); args=('hi4j3kxt4nwt0qzr1qbti5q9tbabgaok', u'2015-09-01 02:54:19.823598')
2015 Sep 01, Tue <02:54:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:54:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:54:27> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1085' AND `problem_problem`.`oj` = 'hdu'); args=(u'1085', u'hdu')
2015 Sep 01, Tue <02:54:27> utils.py[line:89] DEBUG (0.001) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('1085', 'Holding Bin-Laden Captive!', 'We all know that Bin-Laden is a notorious terrorist, and he has disappeared for a long time. But recently, it is reported that he hides in Hang Zhou of China! <br>“Oh, God! How terrible! ”<br><br><center><img src=/upload/hdu/1085/1085_1.jpg></center><br><br>Don’t be so afraid, guys. Although he hides in a cave of Hang Zhou, he dares not to go out. Laden is so bored recent years that he fling himself into some math problems, and he said that if anyone can solve his problem, he will give himself up! <br>Ha-ha! Obviously, Laden is too proud of his intelligence! But, what is his problem?<br>“Given some Chinese Coins (硬币) (three kinds-- 1, 2, 5), and their number is num_1, num_2 and num_5 respectively, please output the minimum value that you cannot pay with given coins.”<br>You, super ACMer, should solve the problem easily, and don’t forget to take $25000000 from Bush!<br>', 'Input contains multiple test cases. Each test case contains 3 positive integers num_1, num_2 and num_5 (0&lt;=num_i&lt;=1000). A test case containing 0 0 0 terminates the input and this test case is not to be processed.<br>', 'Output the minimum positive value that one cannot pay with given coins, one line for one case.<br>', '1 1 3\r\n0 0 0', '4', '', 'lcy', '2015-09-01', 1000, 2000, 32768, 65536, 0, 0, 0, 0, '', 'hdu', 1); args=[u'1085', 'Holding Bin-Laden Captive!', 'We all know that Bin-Laden is a notorious terrorist, and he has disappeared for a long time. But recently, it is reported that he hides in Hang Zhou of China! <br>\xe2\x80\x9cOh, God! How terrible! \xe2\x80\x9d<br><br><center><img src=/upload/hdu/1085/1085_1.jpg></center><br><br>Don\xe2\x80\x99t be so afraid, guys. Although he hides in a cave of Hang Zhou, he dares not to go out. Laden is so bored recent years that he fling himself into some math problems, and he said that if anyone can solve his problem, he will give himself up! <br>Ha-ha! Obviously, Laden is too proud of his intelligence! But, what is his problem?<br>\xe2\x80\x9cGiven some Chinese Coins (\xe7\xa1\xac\xe5\xb8\x81) (three kinds-- 1, 2, 5), and their number is num_1, num_2 and num_5 respectively, please output the minimum value that you cannot pay with given coins.\xe2\x80\x9d<br>You, super ACMer, should solve the problem easily, and don\xe2\x80\x99t forget to take $25000000 from Bush!<br>', 'Input contains multiple test cases. Each test case contains 3 positive integers num_1, num_2 and num_5 (0&lt;=num_i&lt;=1000). A test case containing 0 0 0 terminates the input and this test case is not to be processed.<br>', 'Output the minimum positive value that one cannot pay with given coins, one line for one case.<br>', '1 1 3\r\n0 0 0', '4', '', 'lcy', u'2015-09-01', 1000, 2000, 32768, 65536, False, 0, 0, 0, '', u'hdu', 1]
2015 Sep 01, Tue <02:54:27> log_main.py[line:15] INFO Download image <1085_1.jpg> over
2015 Sep 01, Tue <02:54:32> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:54:32> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:54:32> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1055' AND `problem_problem`.`oj` = 'hdu'); args=(u'1055', u'hdu')
2015 Sep 01, Tue <02:54:32> utils.py[line:89] DEBUG (0.001) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('1055', 'Color a Tree', 'Bob is very interested in the data structure of a tree. A tree is a directed graph in which a special node is singled out, called the &quot;root&quot; of the tree, and there is a unique path from the root to each of the other nodes. <br><br>Bob intends to color all the nodes of a tree with a pen. A tree has N nodes, these nodes are numbered 1, 2, ..., N. Suppose coloring a node takes 1 unit of time, and after finishing coloring one node, he is allowed to color another. Additionally, he is allowed to color a node only when its father node has been colored. Obviously, Bob is only allowed to color the root in the first try. <br><br>Each node has a “coloring cost factor”, Ci. The coloring cost of each node depends both on Ci and the time at which Bob finishes the coloring of this node. At the beginning, the time is set to 0. If the finishing time of coloring node i is Fi, then the coloring cost of node i is Ci * Fi. <br><br>For example, a tree with five nodes is shown in Figure-1. The coloring cost factors of each node are 1, 2, 1, 2 and 4. Bob can color the tree in the order 1, 3, 5, 2, 4, with the minimum total coloring cost of 33.<br><br><img src=//upload/hdu/1055/1055-1.jpg><br><br>Given a tree and the coloring cost factor of each node, please help Bob to find the minimum possible total coloring cost for coloring all the nodes.<br>', 'The input consists of several test cases. The first line of each case contains two integers N and R (1 &lt;= N &lt;= 1000, 1 &lt;= R &lt;= N), where N is the number of nodes in the tree and R is the node number of the root node. The second line contains N integers, the i-th of which is Ci (1 &lt;= Ci &lt;= 500), the coloring cost factor of node i. Each of the next N-1 lines contains two space-separated node numbers V1 and V2, which are the endpoints of an edge in the tree, denoting that V1 is the father node of V2. No edge will be listed twice, and all edges will be listed. <br><br>A test case of N = 0 and R = 0 indicates the end of input, and should not be processed. <br>', 'For each test case, output a line containing the minimum total coloring cost required for Bob to color all the nodes.<br>', '5 1\r\n1 2 1 2 4\r\n1 2\r\n1 3\r\n2 4\r\n3 5\r\n0 0', '33', '', '', '2015-09-01', 1000, 2000, 32768, 65536, 0, 0, 0, 0, '', 'hdu', 1); args=[u'1055', 'Color a Tree', 'Bob is very interested in the data structure of a tree. A tree is a directed graph in which a special node is singled out, called the &quot;root&quot; of the tree, and there is a unique path from the root to each of the other nodes. <br><br>Bob intends to color all the nodes of a tree with a pen. A tree has N nodes, these nodes are numbered 1, 2, ..., N. Suppose coloring a node takes 1 unit of time, and after finishing coloring one node, he is allowed to color another. Additionally, he is allowed to color a node only when its father node has been colored. Obviously, Bob is only allowed to color the root in the first try. <br><br>Each node has a \xe2\x80\x9ccoloring cost factor\xe2\x80\x9d, Ci. The coloring cost of each node depends both on Ci and the time at which Bob finishes the coloring of this node. At the beginning, the time is set to 0. If the finishing time of coloring node i is Fi, then the coloring cost of node i is Ci * Fi. <br><br>For example, a tree with five nodes is shown in Figure-1. The coloring cost factors of each node are 1, 2, 1, 2 and 4. Bob can color the tree in the order 1, 3, 5, 2, 4, with the minimum total coloring cost of 33.<br><br><img src=//upload/hdu/1055/1055-1.jpg><br><br>Given a tree and the coloring cost factor of each node, please help Bob to find the minimum possible total coloring cost for coloring all the nodes.<br>', 'The input consists of several test cases. The first line of each case contains two integers N and R (1 &lt;= N &lt;= 1000, 1 &lt;= R &lt;= N), where N is the number of nodes in the tree and R is the node number of the root node. The second line contains N integers, the i-th of which is Ci (1 &lt;= Ci &lt;= 500), the coloring cost factor of node i. Each of the next N-1 lines contains two space-separated node numbers V1 and V2, which are the endpoints of an edge in the tree, denoting that V1 is the father node of V2. No edge will be listed twice, and all edges will be listed. <br><br>A test case of N = 0 and R = 0 indicates the end of input, and should not be processed. <br>', 'For each test case, output a line containing the minimum total coloring cost required for Bob to color all the nodes.<br>', '5 1\r\n1 2 1 2 4\r\n1 2\r\n1 3\r\n2 4\r\n3 5\r\n0 0', '33', '', '', u'2015-09-01', 1000, 2000, 32768, 65536, False, 0, 0, 0, '', u'hdu', 1]
2015 Sep 01, Tue <02:54:33> log_main.py[line:15] INFO Download image <1055-1.jpg> over
2015 Sep 01, Tue <02:55:12> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:55:12> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:55:12> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1055' AND `problem_problem`.`oj` = 'hdu'); args=(u'1055', u'hdu')
2015 Sep 01, Tue <02:55:13> log_main.py[line:15] INFO Download image <1055-1.jpg> over
2015 Sep 01, Tue <02:55:17> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:55:17> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:55:17> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1085' AND `problem_problem`.`oj` = 'hdu'); args=(u'1085', u'hdu')
2015 Sep 01, Tue <02:55:18> log_main.py[line:15] INFO Download image <1085_1.jpg> over
2015 Sep 01, Tue <02:56:15> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:56:15> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:56:15> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1085' AND `problem_problem`.`oj` = 'hdu'); args=(u'1085', u'hdu')
2015 Sep 01, Tue <02:56:15> log_main.py[line:15] INFO Download image <1085_1.jpg> over
2015 Sep 01, Tue <02:56:18> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:56:18> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:56:18> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1055' AND `problem_problem`.`oj` = 'hdu'); args=(u'1055', u'hdu')
2015 Sep 01, Tue <02:56:18> log_main.py[line:15] INFO Download image <1055-1.jpg> over
2015 Sep 01, Tue <02:56:24> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:56:24> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:56:24> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1022' AND `problem_problem`.`oj` = 'hdu'); args=(u'1022', u'hdu')
2015 Sep 01, Tue <02:56:24> log_main.py[line:15] INFO Download image <1022-1.jpg> over
2015 Sep 01, Tue <02:56:25> log_main.py[line:15] INFO Download image <1022-2.jpg> over
2015 Sep 01, Tue <02:56:25> log_main.py[line:15] INFO Download image <1022-3.jpg> over
2015 Sep 01, Tue <02:56:30> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:56:30> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:56:30> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '3263' AND `problem_problem`.`oj` = 'hdu'); args=(u'3263', u'hdu')
2015 Sep 01, Tue <02:56:31> log_main.py[line:15] INFO Download image <254-1004-1.jpg> over
2015 Sep 01, Tue <02:56:48> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:56:48> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:56:48> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 1; args=(1,)
2015 Sep 01, Tue <02:56:48> defaulttags.py[line:66] WARNING /Library/Python/2.7/site-packages/django/template/defaulttags.py:66: UserWarning: A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext.
  "A {% csrf_token %} was used in a template, but the context "

2015 Sep 01, Tue <02:57:23> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:57:23> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:57:23> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2296' AND `problem_problem`.`oj` = 'poj'); args=(u'2296', u'poj')
2015 Sep 01, Tue <02:57:23> log_main.py[line:15] INFO Download image <2296_1.jpg> over
2015 Sep 01, Tue <02:58:15> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:58:15> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <02:58:15> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2364' AND `problem_problem`.`oj` = 'poj'); args=(u'2364', u'poj')
2015 Sep 01, Tue <03:00:12> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:00:12> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:00:12> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2364' AND `problem_problem`.`oj` = 'poj'); args=(u'2364', u'poj')
2015 Sep 01, Tue <03:00:44> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:00:44> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:00:44> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2364' AND `problem_problem`.`oj` = 'poj'); args=(u'2364', u'poj')
2015 Sep 01, Tue <03:01:14> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:01:14> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:01:14> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2364' AND `problem_problem`.`oj` = 'poj'); args=(u'2364', u'poj')
2015 Sep 01, Tue <03:01:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:01:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:01:27> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2364' AND `problem_problem`.`oj` = 'poj'); args=(u'2364', u'poj')
2015 Sep 01, Tue <03:01:33> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:01:33> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:01:33> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2364' AND `problem_problem`.`oj` = 'poj'); args=(u'2364', u'poj')
2015 Sep 01, Tue <03:06:12> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:06:12> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:06:12> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2364' AND `problem_problem`.`oj` = 'poj'); args=(u'2364', u'poj')
2015 Sep 01, Tue <03:06:48> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:06:48> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:06:48> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2364' AND `problem_problem`.`oj` = 'poj'); args=(u'2364', u'poj')
2015 Sep 01, Tue <03:06:51> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:06:51> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:06:51> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2364' AND `problem_problem`.`oj` = 'poj'); args=(u'2364', u'poj')
2015 Sep 01, Tue <03:07:46> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:07:46> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:07:46> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2296' AND `problem_problem`.`oj` = 'poj'); args=(u'2296', u'poj')
2015 Sep 01, Tue <03:07:46> log_main.py[line:15] INFO Download image <2296_1.jpg> over
2015 Sep 01, Tue <03:08:02> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:08:02> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:08:02> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2364' AND `problem_problem`.`oj` = 'poj'); args=(u'2364', u'poj')
2015 Sep 01, Tue <03:08:02> log_main.py[line:15] INFO Download image <float:left;width: 105px;> over
2015 Sep 01, Tue <03:08:02> log_main.py[line:15] INFO Download image <2364_1.jpg> over
2015 Sep 01, Tue <03:08:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:08:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:08:27> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2296' AND `problem_problem`.`oj` = 'poj'); args=(u'2296', u'poj')
2015 Sep 01, Tue <03:08:27> log_main.py[line:15] INFO Download image <float:left;width: 105px;> over
2015 Sep 01, Tue <03:08:28> log_main.py[line:15] INFO Download image <2296_1.jpg> over
2015 Sep 01, Tue <03:09:50> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:09:50> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:09:50> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2296' AND `problem_problem`.`oj` = 'poj'); args=(u'2296', u'poj')
2015 Sep 01, Tue <03:09:50> log_main.py[line:15] INFO Download image <2296_1.jpg> over
2015 Sep 01, Tue <03:10:02> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:10:02> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:10:02> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2364' AND `problem_problem`.`oj` = 'poj'); args=(u'2364', u'poj')
2015 Sep 01, Tue <03:10:02> log_main.py[line:15] INFO Download image <2364_1.jpg> over
2015 Sep 01, Tue <03:10:16> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:10:16> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:10:16> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1086' AND `problem_problem`.`oj` = 'hdu'); args=(u'1086', u'hdu')
2015 Sep 01, Tue <03:10:16> log_main.py[line:15] INFO Download image <qqlogin.png> over
2015 Sep 01, Tue <03:10:19> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:10:19> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:10:19> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1085' AND `problem_problem`.`oj` = 'hdu'); args=(u'1085', u'hdu')
2015 Sep 01, Tue <03:10:20> log_main.py[line:15] INFO Download image <qqlogin.png> over
2015 Sep 01, Tue <03:10:20> log_main.py[line:15] INFO Download image <1085_1.jpg> over
2015 Sep 01, Tue <03:10:57> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:10:57> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:10:57> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1085' AND `problem_problem`.`oj` = 'hdu'); args=(u'1085', u'hdu')
2015 Sep 01, Tue <03:10:57> log_main.py[line:15] INFO Download image <qqlogin.png> over
2015 Sep 01, Tue <03:10:57> log_main.py[line:15] INFO Download image <1085_1.jpg> over
2015 Sep 01, Tue <03:12:21> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:12:21> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:12:21> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1085' AND `problem_problem`.`oj` = 'hdu'); args=(u'1085', u'hdu')
2015 Sep 01, Tue <03:12:21> log_main.py[line:15] INFO Download image <1085_1.jpg> over
2015 Sep 01, Tue <03:14:12> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:14:12> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:14:12> utils.py[line:89] DEBUG (0.001) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1055' AND `problem_problem`.`oj` = 'hdu'); args=(u'1055', u'hdu')
2015 Sep 01, Tue <03:14:12> log_main.py[line:15] INFO Download image <1055-1.jpg> over
2015 Sep 01, Tue <03:14:40> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:14:40> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:14:40> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1022' AND `problem_problem`.`oj` = 'hdu'); args=(u'1022', u'hdu')
2015 Sep 01, Tue <03:14:40> log_main.py[line:15] INFO Download image <1022-1.jpg> over
2015 Sep 01, Tue <03:14:40> log_main.py[line:15] INFO Download image <1022-2.jpg> over
2015 Sep 01, Tue <03:14:40> log_main.py[line:15] INFO Download image <1022-3.jpg> over
2015 Sep 01, Tue <03:14:46> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:14:46> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:14:46> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1086' AND `problem_problem`.`oj` = 'hdu'); args=(u'1086', u'hdu')
2015 Sep 01, Tue <03:14:57> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:14:57> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:14:57> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1222' AND `problem_problem`.`oj` = 'hdu'); args=(u'1222', u'hdu')
2015 Sep 01, Tue <03:14:58> log_main.py[line:15] INFO Download image <C9-1004-1.jpg> over
2015 Sep 01, Tue <03:15:02> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:02> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:02> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2353' AND `problem_problem`.`oj` = 'hdu'); args=(u'2353', u'hdu')
2015 Sep 01, Tue <03:15:02> log_main.py[line:15] INFO Download image <c131-1003-1.jpg> over
2015 Sep 01, Tue <03:15:09> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:09> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:09> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '3110' AND `problem_problem`.`oj` = 'hdu'); args=(u'3110', u'hdu')
2015 Sep 01, Tue <03:15:10> log_main.py[line:15] INFO Download image <C236-1001-1.JPG> over
2015 Sep 01, Tue <03:15:14> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:14> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:14> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '31113' AND `problem_problem`.`oj` = 'hdu'); args=(u'31113', u'hdu')
2015 Sep 01, Tue <03:15:17> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:17> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:17> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '3111' AND `problem_problem`.`oj` = 'hdu'); args=(u'3111', u'hdu')
2015 Sep 01, Tue <03:15:17> log_main.py[line:15] INFO Download image <C236-1002-1.JPG> over
2015 Sep 01, Tue <03:15:21> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:21> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:21> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '3112' AND `problem_problem`.`oj` = 'hdu'); args=(u'3112', u'hdu')
2015 Sep 01, Tue <03:15:21> log_main.py[line:15] INFO Download image <C236-1003-1.JPG> over
2015 Sep 01, Tue <03:15:26> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:26> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:26> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '3263' AND `problem_problem`.`oj` = 'hdu'); args=(u'3263', u'hdu')
2015 Sep 01, Tue <03:15:27> log_main.py[line:15] INFO Download image <254-1004-1.jpg> over
2015 Sep 01, Tue <03:15:32> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:32> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:32> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '4242' AND `problem_problem`.`oj` = 'hdu'); args=(u'4242', u'hdu')
2015 Sep 01, Tue <03:15:32> log_main.py[line:15] INFO Download image <C397-1007-1.jpg> over
2015 Sep 01, Tue <03:15:43> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:43> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:43> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1027' AND `problem_problem`.`oj` = 'poj'); args=(u'1027', u'poj')
2015 Sep 01, Tue <03:15:43> log_main.py[line:15] INFO Download image <game.jpg> over
2015 Sep 01, Tue <03:15:47> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:47> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:15:47> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1121' AND `problem_problem`.`oj` = 'poj'); args=(u'1121', u'poj')
2015 Sep 01, Tue <03:15:48> log_main.py[line:15] INFO Download image <1121_1.gif> over
2015 Sep 01, Tue <03:16:01> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:16:01> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:16:01> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1232' AND `problem_problem`.`oj` = 'poj'); args=(u'1232', u'poj')
2015 Sep 01, Tue <03:16:02> log_main.py[line:15] INFO Download image <1232_1.jpg> over
2015 Sep 01, Tue <03:16:02> log_main.py[line:15] INFO Download image <1232_2.jpg> over
2015 Sep 01, Tue <03:16:08> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:16:08> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:16:08> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2296' AND `problem_problem`.`oj` = 'poj'); args=(u'2296', u'poj')
2015 Sep 01, Tue <03:16:08> log_main.py[line:15] INFO Download image <2296_1.jpg> over
2015 Sep 01, Tue <03:16:12> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:16:12> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:16:12> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2322' AND `problem_problem`.`oj` = 'poj'); args=(u'2322', u'poj')
2015 Sep 01, Tue <03:16:12> log_main.py[line:15] INFO Download image <2322_1.jpg> over
2015 Sep 01, Tue <03:16:16> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:16:16> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:16:16> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2364' AND `problem_problem`.`oj` = 'poj'); args=(u'2364', u'poj')
2015 Sep 01, Tue <03:16:16> log_main.py[line:15] INFO Download image <2364_1.jpg> over
2015 Sep 01, Tue <03:16:34> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:16:34> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:16:34> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '23645' AND `problem_problem`.`oj` = 'poj'); args=(u'23645', u'poj')
2015 Sep 01, Tue <03:16:50> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:16:50> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:16:50> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2315' AND `problem_problem`.`oj` = 'poj'); args=(u'2315', u'poj')
2015 Sep 01, Tue <03:17:43> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:17:43> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:17:43> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '15623' AND `problem_problem`.`oj` = 'hdu'); args=(u'15623', u'hdu')
2015 Sep 01, Tue <03:17:45> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:17:45> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:17:45> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1562' AND `problem_problem`.`oj` = 'hdu'); args=(u'1562', u'hdu')
2015 Sep 01, Tue <03:20:01> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:01> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:01> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1022' AND `problem_problem`.`oj` = 'hdu'); args=(u'1022', u'hdu')
2015 Sep 01, Tue <03:20:02> utils.py[line:89] DEBUG (0.001) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('1022', 'Train Problem I', 'As the new term comes, the Ignatius Train Station is very busy nowadays. A lot of student want to get back to school by train(because the trains in the Ignatius Train Station is the fastest all over the world ^v^). But here comes a problem, there is only one railway where all the trains stop. So all the trains come in from one side and get out from the other side. For this problem, if train A gets into the railway first, and then train B gets into the railway before train A leaves, train A can\'t leave until train B leaves. The pictures below figure out the problem. Now the problem for you is, there are at most 9 trains in the station, all the trains has an ID(numbered from 1 to n), the trains get into the railway in an order O1, your task is to determine whether the trains can get out in an order O2.<br><img src=/upload/hdu/1022/1022-1.jpg><img src=/upload/hdu/1022/1022-2.jpg><img src=/upload/hdu/1022/1022-3.jpg>', 'The input contains several test cases. Each test case consists of an integer, the number of trains, and two strings, the order of the trains come in:O1, and the order of the trains leave:O2. The input is terminated by the end of file. More details in the Sample Input.<br>', 'The output contains a string &quot;No.&quot; if you can\'t exchange O2 to O1, or you should output a line contains &quot;Yes.&quot;, and then output your way in exchanging the order(you should output &quot;in&quot; for a train getting into the railway, and &quot;out&quot; for a train getting out of the railway). Print a line contains &quot;FINISH&quot; after each test case. More details in the Sample Output.<br>', '3 123 321\r\n3 123 312', 'Yes.\r\nin\r\nin\r\nin\r\nout\r\nout\r\nout\r\nFINISH\r\nNo.\r\nFINI', '\r\nFor the first Sample Input, we let train 1 get in, then train 2 and train 3.\r\nSo now train 3 is at the top of the railway, so train 3 can leave first, then train 2 and train 1.\r\nIn the second Sample input, we should let train 3 leave first, so we have to let train 1 get in, then train 2 and train 3.\r\nNow we can let train 3 leave.\r\nBut after that we can\'t let train 1 leave before train 2, because train 2 is at the top of the railway at the moment.\r\nSo we output \"No.\".', 'Ignatius.L', '2015-09-01', 1000, 2000, 32768, 65536, 0, 0, 0, 0, '', 'hdu', 1); args=[u'1022', 'Train Problem I', "As the new term comes, the Ignatius Train Station is very busy nowadays. A lot of student want to get back to school by train(because the trains in the Ignatius Train Station is the fastest all over the world ^v^). But here comes a problem, there is only one railway where all the trains stop. So all the trains come in from one side and get out from the other side. For this problem, if train A gets into the railway first, and then train B gets into the railway before train A leaves, train A can't leave until train B leaves. The pictures below figure out the problem. Now the problem for you is, there are at most 9 trains in the station, all the trains has an ID(numbered from 1 to n), the trains get into the railway in an order O1, your task is to determine whether the trains can get out in an order O2.<br><img src=/upload/hdu/1022/1022-1.jpg><img src=/upload/hdu/1022/1022-2.jpg><img src=/upload/hdu/1022/1022-3.jpg>", 'The input contains several test cases. Each test case consists of an integer, the number of trains, and two strings, the order of the trains come in:O1, and the order of the trains leave:O2. The input is terminated by the end of file. More details in the Sample Input.<br>', "The output contains a string &quot;No.&quot; if you can't exchange O2 to O1, or you should output a line contains &quot;Yes.&quot;, and then output your way in exchanging the order(you should output &quot;in&quot; for a train getting into the railway, and &quot;out&quot; for a train getting out of the railway). Print a line contains &quot;FINISH&quot; after each test case. More details in the Sample Output.<br>", '3 123 321\r\n3 123 312', 'Yes.\r\nin\r\nin\r\nin\r\nout\r\nout\r\nout\r\nFINISH\r\nNo.\r\nFINI', '\r\nFor the first Sample Input, we let train 1 get in, then train 2 and train 3.\r\nSo now train 3 is at the top of the railway, so train 3 can leave first, then train 2 and train 1.\r\nIn the second Sample input, we should let train 3 leave first, so we have to let train 1 get in, then train 2 and train 3.\r\nNow we can let train 3 leave.\r\nBut after that we can\'t let train 1 leave before train 2, because train 2 is at the top of the railway at the moment.\r\nSo we output "No.".', 'Ignatius.L', u'2015-09-01', 1000, 2000, 32768, 65536, False, 0, 0, 0, '', u'hdu', 1]
2015 Sep 01, Tue <03:20:02> log_main.py[line:15] INFO Download image <1022-1.jpg> over
2015 Sep 01, Tue <03:20:02> log_main.py[line:15] INFO Download image <1022-2.jpg> over
2015 Sep 01, Tue <03:20:02> log_main.py[line:15] INFO Download image <1022-3.jpg> over
2015 Sep 01, Tue <03:20:06> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:06> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:06> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1055' AND `problem_problem`.`oj` = 'hdu'); args=(u'1055', u'hdu')
2015 Sep 01, Tue <03:20:07> utils.py[line:89] DEBUG (0.000) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('1055', 'Color a Tree', 'Bob is very interested in the data structure of a tree. A tree is a directed graph in which a special node is singled out, called the &quot;root&quot; of the tree, and there is a unique path from the root to each of the other nodes. <br><br>Bob intends to color all the nodes of a tree with a pen. A tree has N nodes, these nodes are numbered 1, 2, ..., N. Suppose coloring a node takes 1 unit of time, and after finishing coloring one node, he is allowed to color another. Additionally, he is allowed to color a node only when its father node has been colored. Obviously, Bob is only allowed to color the root in the first try. <br><br>Each node has a “coloring cost factor”, Ci. The coloring cost of each node depends both on Ci and the time at which Bob finishes the coloring of this node. At the beginning, the time is set to 0. If the finishing time of coloring node i is Fi, then the coloring cost of node i is Ci * Fi. <br><br>For example, a tree with five nodes is shown in Figure-1. The coloring cost factors of each node are 1, 2, 1, 2 and 4. Bob can color the tree in the order 1, 3, 5, 2, 4, with the minimum total coloring cost of 33.<br><br><img src=/upload/hdu/1055/1055-1.jpg><br><br>Given a tree and the coloring cost factor of each node, please help Bob to find the minimum possible total coloring cost for coloring all the nodes.<br>', 'The input consists of several test cases. The first line of each case contains two integers N and R (1 &lt;= N &lt;= 1000, 1 &lt;= R &lt;= N), where N is the number of nodes in the tree and R is the node number of the root node. The second line contains N integers, the i-th of which is Ci (1 &lt;= Ci &lt;= 500), the coloring cost factor of node i. Each of the next N-1 lines contains two space-separated node numbers V1 and V2, which are the endpoints of an edge in the tree, denoting that V1 is the father node of V2. No edge will be listed twice, and all edges will be listed. <br><br>A test case of N = 0 and R = 0 indicates the end of input, and should not be processed. <br>', 'For each test case, output a line containing the minimum total coloring cost required for Bob to color all the nodes.<br>', '5 1\r\n1 2 1 2 4\r\n1 2\r\n1 3\r\n2 4\r\n3 5\r\n0 0', '33', '', '', '2015-09-01', 1000, 2000, 32768, 65536, 0, 0, 0, 0, '', 'hdu', 1); args=[u'1055', 'Color a Tree', 'Bob is very interested in the data structure of a tree. A tree is a directed graph in which a special node is singled out, called the &quot;root&quot; of the tree, and there is a unique path from the root to each of the other nodes. <br><br>Bob intends to color all the nodes of a tree with a pen. A tree has N nodes, these nodes are numbered 1, 2, ..., N. Suppose coloring a node takes 1 unit of time, and after finishing coloring one node, he is allowed to color another. Additionally, he is allowed to color a node only when its father node has been colored. Obviously, Bob is only allowed to color the root in the first try. <br><br>Each node has a \xe2\x80\x9ccoloring cost factor\xe2\x80\x9d, Ci. The coloring cost of each node depends both on Ci and the time at which Bob finishes the coloring of this node. At the beginning, the time is set to 0. If the finishing time of coloring node i is Fi, then the coloring cost of node i is Ci * Fi. <br><br>For example, a tree with five nodes is shown in Figure-1. The coloring cost factors of each node are 1, 2, 1, 2 and 4. Bob can color the tree in the order 1, 3, 5, 2, 4, with the minimum total coloring cost of 33.<br><br><img src=/upload/hdu/1055/1055-1.jpg><br><br>Given a tree and the coloring cost factor of each node, please help Bob to find the minimum possible total coloring cost for coloring all the nodes.<br>', 'The input consists of several test cases. The first line of each case contains two integers N and R (1 &lt;= N &lt;= 1000, 1 &lt;= R &lt;= N), where N is the number of nodes in the tree and R is the node number of the root node. The second line contains N integers, the i-th of which is Ci (1 &lt;= Ci &lt;= 500), the coloring cost factor of node i. Each of the next N-1 lines contains two space-separated node numbers V1 and V2, which are the endpoints of an edge in the tree, denoting that V1 is the father node of V2. No edge will be listed twice, and all edges will be listed. <br><br>A test case of N = 0 and R = 0 indicates the end of input, and should not be processed. <br>', 'For each test case, output a line containing the minimum total coloring cost required for Bob to color all the nodes.<br>', '5 1\r\n1 2 1 2 4\r\n1 2\r\n1 3\r\n2 4\r\n3 5\r\n0 0', '33', '', '', u'2015-09-01', 1000, 2000, 32768, 65536, False, 0, 0, 0, '', u'hdu', 1]
2015 Sep 01, Tue <03:20:07> log_main.py[line:15] INFO Download image <1055-1.jpg> over
2015 Sep 01, Tue <03:20:10> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:10> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:10> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1085' AND `problem_problem`.`oj` = 'hdu'); args=(u'1085', u'hdu')
2015 Sep 01, Tue <03:20:10> utils.py[line:89] DEBUG (0.001) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('1085', 'Holding Bin-Laden Captive!', 'We all know that Bin-Laden is a notorious terrorist, and he has disappeared for a long time. But recently, it is reported that he hides in Hang Zhou of China! <br>“Oh, God! How terrible! ”<br><br><center><img src=/upload/hdu/1085/1085_1.jpg></center><br><br>Don’t be so afraid, guys. Although he hides in a cave of Hang Zhou, he dares not to go out. Laden is so bored recent years that he fling himself into some math problems, and he said that if anyone can solve his problem, he will give himself up! <br>Ha-ha! Obviously, Laden is too proud of his intelligence! But, what is his problem?<br>“Given some Chinese Coins (硬币) (three kinds-- 1, 2, 5), and their number is num_1, num_2 and num_5 respectively, please output the minimum value that you cannot pay with given coins.”<br>You, super ACMer, should solve the problem easily, and don’t forget to take $25000000 from Bush!<br>', 'Input contains multiple test cases. Each test case contains 3 positive integers num_1, num_2 and num_5 (0&lt;=num_i&lt;=1000). A test case containing 0 0 0 terminates the input and this test case is not to be processed.<br>', 'Output the minimum positive value that one cannot pay with given coins, one line for one case.<br>', '1 1 3\r\n0 0 0', '4', '', 'lcy', '2015-09-01', 1000, 2000, 32768, 65536, 0, 0, 0, 0, '', 'hdu', 1); args=[u'1085', 'Holding Bin-Laden Captive!', 'We all know that Bin-Laden is a notorious terrorist, and he has disappeared for a long time. But recently, it is reported that he hides in Hang Zhou of China! <br>\xe2\x80\x9cOh, God! How terrible! \xe2\x80\x9d<br><br><center><img src=/upload/hdu/1085/1085_1.jpg></center><br><br>Don\xe2\x80\x99t be so afraid, guys. Although he hides in a cave of Hang Zhou, he dares not to go out. Laden is so bored recent years that he fling himself into some math problems, and he said that if anyone can solve his problem, he will give himself up! <br>Ha-ha! Obviously, Laden is too proud of his intelligence! But, what is his problem?<br>\xe2\x80\x9cGiven some Chinese Coins (\xe7\xa1\xac\xe5\xb8\x81) (three kinds-- 1, 2, 5), and their number is num_1, num_2 and num_5 respectively, please output the minimum value that you cannot pay with given coins.\xe2\x80\x9d<br>You, super ACMer, should solve the problem easily, and don\xe2\x80\x99t forget to take $25000000 from Bush!<br>', 'Input contains multiple test cases. Each test case contains 3 positive integers num_1, num_2 and num_5 (0&lt;=num_i&lt;=1000). A test case containing 0 0 0 terminates the input and this test case is not to be processed.<br>', 'Output the minimum positive value that one cannot pay with given coins, one line for one case.<br>', '1 1 3\r\n0 0 0', '4', '', 'lcy', u'2015-09-01', 1000, 2000, 32768, 65536, False, 0, 0, 0, '', u'hdu', 1]
2015 Sep 01, Tue <03:20:11> log_main.py[line:15] INFO Download image <1085_1.jpg> over
2015 Sep 01, Tue <03:20:13> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:13> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:13> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1222' AND `problem_problem`.`oj` = 'hdu'); args=(u'1222', u'hdu')
2015 Sep 01, Tue <03:20:14> utils.py[line:89] DEBUG (0.000) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('1222', 'Wolf and Rabbit', 'There is a hill with n holes around. The holes are signed from 0 to n-1.<br><br><center><img src=/upload/hdu/1222/C9-1004-1.jpg></center><br><br>A rabbit must hide in one of the holes. A wolf searches the rabbit in anticlockwise order. The first hole he get into is the one signed with 0. Then he will get into the hole every m holes. For example, m=2 and n=6, the wolf will get into the holes which are signed 0,2,4,0. If the rabbit hides in the hole which signed 1,3 or 5, she will survive. So we call these holes the safe holes.<br>', 'The input starts with a positive integer P which indicates the number of test cases. Then on the following P lines,each line consists 2 positive integer m and n(0&lt;m,n&lt;2147483648).<br>', 'For each input m n, if safe holes exist, you should output &quot;YES&quot;, else output &quot;NO&quot; in a single line.<br>', '2\r\n1 2\r\n2 2', 'NO\r\nYES', '', 'weigang Lee', '2015-09-01', 1000, 2000, 32768, 65536, 0, 0, 0, 0, '', 'hdu', 1); args=[u'1222', 'Wolf and Rabbit', 'There is a hill with n holes around. The holes are signed from 0 to n-1.<br><br><center><img src=/upload/hdu/1222/C9-1004-1.jpg></center><br><br>A rabbit must hide in one of the holes. A wolf searches the rabbit in anticlockwise order. The first hole he get into is the one signed with 0. Then he will get into the hole every m holes. For example, m=2 and n=6, the wolf will get into the holes which are signed 0,2,4,0. If the rabbit hides in the hole which signed 1,3 or 5, she will survive. So we call these holes the safe holes.<br>', 'The input starts with a positive integer P which indicates the number of test cases. Then on the following P lines,each line consists 2 positive integer m and n(0&lt;m,n&lt;2147483648).<br>', 'For each input m n, if safe holes exist, you should output &quot;YES&quot;, else output &quot;NO&quot; in a single line.<br>', '2\r\n1 2\r\n2 2', 'NO\r\nYES', '', 'weigang Lee', u'2015-09-01', 1000, 2000, 32768, 65536, False, 0, 0, 0, '', u'hdu', 1]
2015 Sep 01, Tue <03:20:14> log_main.py[line:15] INFO Download image <C9-1004-1.jpg> over
2015 Sep 01, Tue <03:20:17> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:17> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:17> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2353' AND `problem_problem`.`oj` = 'hdu'); args=(u'2353', u'hdu')
2015 Sep 01, Tue <03:20:17> utils.py[line:89] DEBUG (0.001) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('2353', 'The Screen Behind the Mirror', 'Dr. Evil has contracted your valuable services to build for him the world\'s most powerful &quot;laser&quot;. Of course before you spend one billion dollars<br>building the thing, you want to run some simulations first to make sure everything will work as designed. For this phase of the project, you will be<br>simulating part of the aiming system which uses mirrors and other optics to change the direction of the laser beam.<br><br>The simulation consists of a flat square table with mirrors, beam splitters, and beam detectors arranged on the tabletop, and with each object<br>represented by a one dimensional line segment. The list below describes each of the object types in detail:<br><br>mirror : A mirror object will reflect any laser beam striking its surface. The reflected beam leaves at the same angle of incidence as the<br>incoming beam. Note that both sides of a mirror object are reflective.<br><br>detector : A detector is an opaque object which absorbs any laser beam striking it. The simulation must also keep track of which detectors are<br>struck by a laser for program output purposes. Note that a laser beam strike on either side of a detector counts as a &quot;hit&quot;.<br><br>splitter : When a laser beam strikes a splitter, it divides into two beams. One of the new beams will reflect from the splitter surface (as with a<br>mirror), and the other beam will pass through the splitter without changing direction. A splitter will function the same way regardless which<br>side of it is struck by a laser beam.<br><br>See the figures below for examples of a laser beam\'s interaction with each of the possible object types:<br><br><center><img src=/upload/hdu/2353/c131-1003-1.jpg></center><br><br>For each simulation, a single laser beam enters the tabletop area. The program must compute the path taken by the laser beam (including secondary beams due to splitters), and it must determine which detectors are struck by a laser beam.<br><br>You can make the following assumptions in the program:<br><br>1. The tabletop surface is a 100 by 100 square, and unless otherwise specified all coordinates in the program\'s input are given as integers within<br>the tabletop area (i.e. between 0 and 100 inclusive).<br>2. There will be no overlaps between the line 2. segment objects.<br>3. The laser which enters the tabletop area always starts from the edge of the table.<br>4. The simulation of each data set ends when all laser beams have either exited the table top area or have terminated at a detector.<br>5. For each data set there will be no more than 100 total reflections among all laser beams in that data set.<br>6. A laser beam will never intersect any object on a vertex and will never be collinear with an object\'s line segment.<br>7. Each data set will contain at least one detector object.', 'Input to this problem will begin with a line containing a single integer N (1 ≤ N ≤ 100) indicating the number of data sets. Each data set consists of<br>the following components:<br><br>A single line with four numbers &quot;x,y i,j&quot; where x,y is a point along the table edge at which the laser beam enters, and i,j is a vector with integer<br>components(-1024 ≤ i,j ≤ 1024) specifying the direction of the incoming laser beam, where i corresponds to the x-axis direction and j<br>corresponds to the y-axis direction.<br>A line with a single integer P (1 ≤ P ≤ 100) giving the total number of objects in this data set.<br>A series of P lines, each representing one object, with the first line describing object 1, the second line describing object 2, and so on. Each<br>line begins with a single letter specifying the object type where a &quot;M&quot; indicates a mirror object, &quot;S&quot; a splitter, and &quot;D&quot; a detector. This is<br>followed by two coordinate pairs of the form &quot;x,y&quot;, specifying the two end points of the object\'s line segment.', 'For each data set in the input, output the heading &quot;DATA SET #k&quot; where k is 1 for the first data set, 2 for the second, etc. If in this data set none of the detector objects are struck by any laser beams, output the message &quot;NO BEAMS DETECTED&quot;. Otherwise, output the object number, one per line, of each detector struck by a laser beam. The list of detectors should be sorted by their object numbers and output in ascending order. If a detector is struck by more than one laser beam, it should only be listed once in the output.', '1\r\n50,100 0,-1\r\n6\r\nD 0,40 20,20\r\nM 40,20 60,40\r\nD 80,20 100,40\r\nD 0,70 20,90\r\nS 40,90 60,70\r\nD 80,90 100,70', 'DATA SET #1\r\n1\r\n6', '', '', '2015-09-01', 1000, 3000, 32768, 32768, 0, 0, 0, 0, '', 'hdu', 1); args=[u'2353', 'The Screen Behind the Mirror', "Dr. Evil has contracted your valuable services to build for him the world's most powerful &quot;laser&quot;. Of course before you spend one billion dollars<br>building the thing, you want to run some simulations first to make sure everything will work as designed. For this phase of the project, you will be<br>simulating part of the aiming system which uses mirrors and other optics to change the direction of the laser beam.<br><br>The simulation consists of a flat square table with mirrors, beam splitters, and beam detectors arranged on the tabletop, and with each object<br>represented by a one dimensional line segment. The list below describes each of the object types in detail:<br><br>mirror : A mirror object will reflect any laser beam striking its surface. The reflected beam leaves at the same angle of incidence as the<br>incoming beam. Note that both sides of a mirror object are reflective.<br><br>detector : A detector is an opaque object which absorbs any laser beam striking it. The simulation must also keep track of which detectors are<br>struck by a laser for program output purposes. Note that a laser beam strike on either side of a detector counts as a &quot;hit&quot;.<br><br>splitter : When a laser beam strikes a splitter, it divides into two beams. One of the new beams will reflect from the splitter surface (as with a<br>mirror), and the other beam will pass through the splitter without changing direction. A splitter will function the same way regardless which<br>side of it is struck by a laser beam.<br><br>See the figures below for examples of a laser beam's interaction with each of the possible object types:<br><br><center><img src=/upload/hdu/2353/c131-1003-1.jpg></center><br><br>For each simulation, a single laser beam enters the tabletop area. The program must compute the path taken by the laser beam (including secondary beams due to splitters), and it must determine which detectors are struck by a laser beam.<br><br>You can make the following assumptions in the program:<br><br>1. The tabletop surface is a 100 by 100 square, and unless otherwise specified all coordinates in the program's input are given as integers within<br>the tabletop area (i.e. between 0 and 100 inclusive).<br>2. There will be no overlaps between the line 2. segment objects.<br>3. The laser which enters the tabletop area always starts from the edge of the table.<br>4. The simulation of each data set ends when all laser beams have either exited the table top area or have terminated at a detector.<br>5. For each data set there will be no more than 100 total reflections among all laser beams in that data set.<br>6. A laser beam will never intersect any object on a vertex and will never be collinear with an object's line segment.<br>7. Each data set will contain at least one detector object.", "Input to this problem will begin with a line containing a single integer N (1 \xe2\x89\xa4 N \xe2\x89\xa4 100) indicating the number of data sets. Each data set consists of<br>the following components:<br><br>A single line with four numbers &quot;x,y i,j&quot; where x,y is a point along the table edge at which the laser beam enters, and i,j is a vector with integer<br>components(-1024 \xe2\x89\xa4 i,j \xe2\x89\xa4 1024) specifying the direction of the incoming laser beam, where i corresponds to the x-axis direction and j<br>corresponds to the y-axis direction.<br>A line with a single integer P (1 \xe2\x89\xa4 P \xe2\x89\xa4 100) giving the total number of objects in this data set.<br>A series of P lines, each representing one object, with the first line describing object 1, the second line describing object 2, and so on. Each<br>line begins with a single letter specifying the object type where a &quot;M&quot; indicates a mirror object, &quot;S&quot; a splitter, and &quot;D&quot; a detector. This is<br>followed by two coordinate pairs of the form &quot;x,y&quot;, specifying the two end points of the object's line segment.", 'For each data set in the input, output the heading &quot;DATA SET #k&quot; where k is 1 for the first data set, 2 for the second, etc. If in this data set none of the detector objects are struck by any laser beams, output the message &quot;NO BEAMS DETECTED&quot;. Otherwise, output the object number, one per line, of each detector struck by a laser beam. The list of detectors should be sorted by their object numbers and output in ascending order. If a detector is struck by more than one laser beam, it should only be listed once in the output.', '1\r\n50,100 0,-1\r\n6\r\nD 0,40 20,20\r\nM 40,20 60,40\r\nD 80,20 100,40\r\nD 0,70 20,90\r\nS 40,90 60,70\r\nD 80,90 100,70', 'DATA SET #1\r\n1\r\n6', '', '', u'2015-09-01', 1000, 3000, 32768, 32768, False, 0, 0, 0, '', u'hdu', 1]
2015 Sep 01, Tue <03:20:17> log_main.py[line:15] INFO Download image <c131-1003-1.jpg> over
2015 Sep 01, Tue <03:20:20> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:20> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:20> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '3110' AND `problem_problem`.`oj` = 'hdu'); args=(u'3110', u'hdu')
2015 Sep 01, Tue <03:20:20> utils.py[line:89] DEBUG (0.000) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('3110', 'Crystal Ball Factory', 'The Astrologically Clairvoyant Manufacturers (ACM),a pioneer in future-predicting technology, just landed a contract to manufacture crystal balls for weather forecasters around the world. Every week, a variable number of crystal balls needs to be delivered; the required amount for each week is specified in the contract.<br><br><center><img src=/upload/hdu/3110/C236-1001-1.JPG></center><br><br>Crystal balls are made from the highest-quality crystal, whose price fluctuates from week to week. Fortunately, the ACM is able to foresee the price of crystal for the coming weeks, thanks to its own future-predicting technology.<br><br>When the price is low, the ACM would like to buy crystal and manufacture crystal balls, storing any excess in their warehouse. On the other hand, in weeks for which the price is high, ACM would rather use the crystal balls stored in the warehouse to satisfy the demand specified in their contract. However, since there is a also a fixed weekly cost to store each crystal ball in the warehouse, and an initial cost for turning on the manufacturing machines and producing a non-zero quantity of crystal balls, the decision is not always simple.<br><br>Can you help them fulfill their contract at minimal cost?<br>', 'The first line of each test case (representing a contract) will contain the number of weeks for which the contract will last. <br><br>The next line will contain the non-negative integers b, k and n, where b is the base cost for manufacturing a non-zero quantity of crystal balls on a given week, k is the cost for storing each crystal ball in the warehouse for a week, and n is the maximum capacity of the warehouse.<br><br>The following lines will describe the weeks specified in the contract in chronological order. Each week is described by a single line which will contain a pair of non-negative integers c and r, where c is the cost for manufacturing a new crystal ball using new crystal bought this week, and r is the number of crystal balls which must be delivered this week. A crystal ball can be manufactured and delivered in the same week if appropriate, in which case it won’t need to be stored in the warehouse at all. <br><br>The last line of the input will contain the integer 0 and should not be processed. <br>', 'For each test case, output the minimum amount which the ACM will have to spend in order to fulfill the entire contract. All the numbers in the input will be at most 1000.', '4\r\n1 0 1000\r\n1 1\r\n12 4\r\n1 0\r\n1000 1000\r\n2\r\n0 100 1\r\n1 1000\r\n1000 101\r\n0', '1007\r\n101101', '', '', '2015-09-01', 1000, 2000, 32768, 32768, 0, 0, 0, 0, '', 'hdu', 1); args=[u'3110', 'Crystal Ball Factory', 'The Astrologically Clairvoyant Manufacturers (ACM),a pioneer in future-predicting technology, just landed a contract to manufacture crystal balls for weather forecasters around the world. Every week, a variable number of crystal balls needs to be delivered; the required amount for each week is specified in the contract.<br><br><center><img src=/upload/hdu/3110/C236-1001-1.JPG></center><br><br>Crystal balls are made from the highest-quality crystal, whose price fluctuates from week to week. Fortunately, the ACM is able to foresee the price of crystal for the coming weeks, thanks to its own future-predicting technology.<br><br>When the price is low, the ACM would like to buy crystal and manufacture crystal balls, storing any excess in their warehouse. On the other hand, in weeks for which the price is high, ACM would rather use the crystal balls stored in the warehouse to satisfy the demand specified in their contract. However, since there is a also a fixed weekly cost to store each crystal ball in the warehouse, and an initial cost for turning on the manufacturing machines and producing a non-zero quantity of crystal balls, the decision is not always simple.<br><br>Can you help them fulfill their contract at minimal cost?<br>', 'The first line of each test case (representing a contract) will contain the number of weeks for which the contract will last. <br><br>The next line will contain the non-negative integers b, k and n, where b is the base cost for manufacturing a non-zero quantity of crystal balls on a given week, k is the cost for storing each crystal ball in the warehouse for a week, and n is the maximum capacity of the warehouse.<br><br>The following lines will describe the weeks specified in the contract in chronological order. Each week is described by a single line which will contain a pair of non-negative integers c and r, where c is the cost for manufacturing a new crystal ball using new crystal bought this week, and r is the number of crystal balls which must be delivered this week. A crystal ball can be manufactured and delivered in the same week if appropriate, in which case it won\xe2\x80\x99t need to be stored in the warehouse at all. <br><br>The last line of the input will contain the integer 0 and should not be processed. <br>', 'For each test case, output the minimum amount which the ACM will have to spend in order to fulfill the entire contract. All the numbers in the input will be at most 1000.', '4\r\n1 0 1000\r\n1 1\r\n12 4\r\n1 0\r\n1000 1000\r\n2\r\n0 100 1\r\n1 1000\r\n1000 101\r\n0', '1007\r\n101101', '', '', u'2015-09-01', 1000, 2000, 32768, 32768, False, 0, 0, 0, '', u'hdu', 1]
2015 Sep 01, Tue <03:20:20> log_main.py[line:15] INFO Download image <C236-1001-1.JPG> over
2015 Sep 01, Tue <03:20:23> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:23> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:23> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '3111' AND `problem_problem`.`oj` = 'hdu'); args=(u'3111', u'hdu')
2015 Sep 01, Tue <03:20:23> utils.py[line:89] DEBUG (0.002) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('3111', 'Sudoku', 'A Sudoku puzzle, once solved, is a 9x9 grid of digits organized as a 3x3 grid of smaller 3x3 units. Each of the nine rows must contain every positive digits exactly once, as do each column and also each 3x3 unit. The puzzle is to start from a partially filled 9x9 grid and to fill in the remaining cells using only logic. The puzzle maker usually makes sure that the solution will be unique and that it can be reached using deduction only, without guessing.<br><center><img src=/upload/hdu/3111/C236-1002-1.JPG></center><br>This number placing game is gaining popularity in the west, and every second newspaper publishes weekly instances of the puzzle. Somewhere at the head of one such newspaper, someone decided that buying individual instances from a puzzle maker would be too expansive, and instead decided to steal puzzles from other newspapers and also to print randomly generated Sudoku-like grids.<br><br>One week later, his assistant gets stuck with the job of printing the solution to the Sudoku puzzles his boss previously published. Unfortunately, his boss doesn’t have those solutions, the randomly generated problems don’t have any solution, and he doesn’t even remember which is which. In despair, the assistant calls for your help.', 'The first line of the input will contain the number of test cases. Each test case will consist of a 9 by 9 grid of characters, where each character will either be ‘?’ or a digit between 1 and 9 inclusively.', 'For each test case, you must print back the grid to the standard input, replacing each question mark with an appropriate digit to solve the Sudoku. If a test case does not allow any solution, output ”impossible” instead of a completed grid. If a test case do allow a solution, you can assume that the solution will be unique, and that theoretically it could be reached without guessing.<br><br>Test cases are separated by “---” both in the input and in the output.', '3\r\n??4??9??8\r\n?3??5??1?\r\n7??4??2??\r\n3??8??1??\r\n?5?????9?\r\n??6??1??2\r\n??8??3??1\r\n?2??4??5?\r\n6??1??7??\r\n---\r\n??4??9??8\r\n?3??5??1?\r\n7??4??2??\r\n3??8??1??\r\n?5?????9?\r\n??6??1??2\r\n??8??3??1\r\n62??4??5?\r\n6??1??7??\r\n---\r\n3?1????76\r\n7??9?????\r\n2?5?3????\r\n?????64?1\r\n???2?1???\r\n1?25?????\r\n????8?9?3\r\n?????9??4\r\n51????7?8', '264319578\r\n839257416\r\n715486239\r\n372894165\r\n451632897\r\n986571342\r\n548763921\r\n127948653\r\n693125784\r\n---\r\nimpossible\r\n---\r\n391452876\r\n764918532\r\n285637149\r\n953876421\r\n678241395\r\n142593687\r\n426785913\r\n837169254\r\n519324768', '', '', '2015-09-01', 1000, 2000, 32768, 32768, 0, 0, 0, 0, '', 'hdu', 1); args=[u'3111', 'Sudoku', 'A Sudoku puzzle, once solved, is a 9x9 grid of digits organized as a 3x3 grid of smaller 3x3 units. Each of the nine rows must contain every positive digits exactly once, as do each column and also each 3x3 unit. The puzzle is to start from a partially filled 9x9 grid and to fill in the remaining cells using only logic. The puzzle maker usually makes sure that the solution will be unique and that it can be reached using deduction only, without guessing.<br><center><img src=/upload/hdu/3111/C236-1002-1.JPG></center><br>This number placing game is gaining popularity in the west, and every second newspaper publishes weekly instances of the puzzle. Somewhere at the head of one such newspaper, someone decided that buying individual instances from a puzzle maker would be too expansive, and instead decided to steal puzzles from other newspapers and also to print randomly generated Sudoku-like grids.<br><br>One week later, his assistant gets stuck with the job of printing the solution to the Sudoku puzzles his boss previously published. Unfortunately, his boss doesn\xe2\x80\x99t have those solutions, the randomly generated problems don\xe2\x80\x99t have any solution, and he doesn\xe2\x80\x99t even remember which is which. In despair, the assistant calls for your help.', 'The first line of the input will contain the number of test cases. Each test case will consist of a 9 by 9 grid of characters, where each character will either be \xe2\x80\x98?\xe2\x80\x99 or a digit between 1 and 9 inclusively.', 'For each test case, you must print back the grid to the standard input, replacing each question mark with an appropriate digit to solve the Sudoku. If a test case does not allow any solution, output \xe2\x80\x9dimpossible\xe2\x80\x9d instead of a completed grid. If a test case do allow a solution, you can assume that the solution will be unique, and that theoretically it could be reached without guessing.<br><br>Test cases are separated by \xe2\x80\x9c---\xe2\x80\x9d both in the input and in the output.', '3\r\n??4??9??8\r\n?3??5??1?\r\n7??4??2??\r\n3??8??1??\r\n?5?????9?\r\n??6??1??2\r\n??8??3??1\r\n?2??4??5?\r\n6??1??7??\r\n---\r\n??4??9??8\r\n?3??5??1?\r\n7??4??2??\r\n3??8??1??\r\n?5?????9?\r\n??6??1??2\r\n??8??3??1\r\n62??4??5?\r\n6??1??7??\r\n---\r\n3?1????76\r\n7??9?????\r\n2?5?3????\r\n?????64?1\r\n???2?1???\r\n1?25?????\r\n????8?9?3\r\n?????9??4\r\n51????7?8', '264319578\r\n839257416\r\n715486239\r\n372894165\r\n451632897\r\n986571342\r\n548763921\r\n127948653\r\n693125784\r\n---\r\nimpossible\r\n---\r\n391452876\r\n764918532\r\n285637149\r\n953876421\r\n678241395\r\n142593687\r\n426785913\r\n837169254\r\n519324768', '', '', u'2015-09-01', 1000, 2000, 32768, 32768, False, 0, 0, 0, '', u'hdu', 1]
2015 Sep 01, Tue <03:20:23> log_main.py[line:15] INFO Download image <C236-1002-1.JPG> over
2015 Sep 01, Tue <03:20:25> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:25> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:25> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '3112' AND `problem_problem`.`oj` = 'hdu'); args=(u'3112', u'hdu')
2015 Sep 01, Tue <03:20:25> utils.py[line:89] DEBUG (0.001) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('3112', 'Planet Alignment', 'The Astrologically Clairvoyant Manufacturers have always used the celestial skies to make more accurate forecasts. Most of their predictions are based on a Star-Planet-Satellite alignment. There are some scientific reasons for this, mostly tidal changes: the gravitational pull of these celestial bodies will pull the water towards them. The greatest tides occur when the Sun, Earth, and Moon are perfectly aligned.<br><center><img src=/upload/hdu/3112/C236-1003-1.JPG></center><br><br>Always willing to expand its share of the market, the ACM has decided to generalize its predicitions to other planetary systems. However, on those systems the celestial bodies move at different speeds than in ours, so the predictions which depend on the Star-Planet-Satellite alignment must be recalculated. Can you help them automate some of their computations?<br><br>For some stellar system, at some point of the future denoted as t = 0, the star, a planet and a moon of the planet will be aligned on the galactic x axis. The star will be at position (0, 0), the planet will be at position (p, 0), and its planet will be at position (m, 0). The planet moves around the star in a perfect circle, on the galactic xy plane, and completes a revolution in u Earth days. Similarly, the moon revolves around the planet in v Earth days, in a perfect circle and on the same galactic plane. In other words, at t = u the planet will be back at position (p, 0), and at t = v the moon will once again have the same y coordinate as the planet and will be on the same side of the planet as when t was zero.<br><br>When will the three celestial bodies be aligned again?<br>', 'The first line of input will contain a non-negative integer n, which represent the number of test cases. For each test case, you will be given one line containing the non-zero integers u and v, all of which could be negative. The distance between the moon and the planet will be strictly smaller than distance between the planet and the star, and the revolution durations won’t cause the celestial bodies to be permanently aligned. A positive revolution duration indicates that a celestial body revolves counter-clockwise, and a negative revolution duration indicates clockwise motion.<br>', 'For each test case, find the minimum positive number t such that after that number of Earth days, the three celestial bodies will be perfectly aligned again. Output that number with three decimal places, rounding to the nearest allowed value. <br>The magnitude of the numbers in the input will be at most 1000.', '2\r\n1 -1\r\n2 1', '0.250\r\n1.000', '', '', '2015-09-01', 1000, 2000, 32768, 32768, 0, 0, 0, 0, '', 'hdu', 1); args=[u'3112', 'Planet Alignment', 'The Astrologically Clairvoyant Manufacturers have always used the celestial skies to make more accurate forecasts. Most of their predictions are based on a Star-Planet-Satellite alignment. There are some scientific reasons for this, mostly tidal changes: the gravitational pull of these celestial bodies will pull the water towards them. The greatest tides occur when the Sun, Earth, and Moon are perfectly aligned.<br><center><img src=/upload/hdu/3112/C236-1003-1.JPG></center><br><br>Always willing to expand its share of the market, the ACM has decided to generalize its predicitions to other planetary systems. However, on those systems the celestial bodies move at different speeds than in ours, so the predictions which depend on the Star-Planet-Satellite alignment must be recalculated. Can you help them automate some of their computations?<br><br>For some stellar system, at some point of the future denoted as t = 0, the star, a planet and a moon of the planet will be aligned on the galactic x axis. The star will be at position (0, 0), the planet will be at position (p, 0), and its planet will be at position (m, 0). The planet moves around the star in a perfect circle, on the galactic xy plane, and completes a revolution in u Earth days. Similarly, the moon revolves around the planet in v Earth days, in a perfect circle and on the same galactic plane. In other words, at t = u the planet will be back at position (p, 0), and at t = v the moon will once again have the same y coordinate as the planet and will be on the same side of the planet as when t was zero.<br><br>When will the three celestial bodies be aligned again?<br>', 'The first line of input will contain a non-negative integer n, which represent the number of test cases. For each test case, you will be given one line containing the non-zero integers u and v, all of which could be negative. The distance between the moon and the planet will be strictly smaller than distance between the planet and the star, and the revolution durations won\xe2\x80\x99t cause the celestial bodies to be permanently aligned. A positive revolution duration indicates that a celestial body revolves counter-clockwise, and a negative revolution duration indicates clockwise motion.<br>', 'For each test case, find the minimum positive number t such that after that number of Earth days, the three celestial bodies will be perfectly aligned again. Output that number with three decimal places, rounding to the nearest allowed value. <br>The magnitude of the numbers in the input will be at most 1000.', '2\r\n1 -1\r\n2 1', '0.250\r\n1.000', '', '', u'2015-09-01', 1000, 2000, 32768, 32768, False, 0, 0, 0, '', u'hdu', 1]
2015 Sep 01, Tue <03:20:26> log_main.py[line:15] INFO Download image <C236-1003-1.JPG> over
2015 Sep 01, Tue <03:20:28> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:28> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:28> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '3263' AND `problem_problem`.`oj` = 'hdu'); args=(u'3263', u'hdu')
2015 Sep 01, Tue <03:20:28> utils.py[line:89] DEBUG (0.002) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('3263', 'Ancient vending machine', 'Though the story of Shaolong Xiang, the great time-traveler, is not recorded in the history, some recent discoveries show the possibility that the ancient mystery visitor might really exist. Several months ago, a strange machine was found together with some newly unearthed terra-cotta warriors. That machine looks like a modern machine and even has some electronic parts — that’s why people take Mr. Xiang into consideration when guessing the origin of the strange machine. <br><br>After careful examinations, scientists finally figured out what the machine is -- it actually is a vending machine in Qin dynasty! There is a hole on a panel of the machine, and scientists are pretty sure that Qin people put their coins into the machine through that hole to buy things. As you know, there were too many different types of coins before Qin dynasty and Emperor Qin Shihuang didn’t like that. But scientists found an announcement made by Qin Shihuang carved on the machine, saying that any coins which can go through the hole is still legal to use. Now your task is to determine whether a certain type of coin can be put into the hole—from these results we might find some clues about the mystery time-traveler.<br><br>The hole on the panel is a polygon and all coins also have a shape of polygon. THEY ALL MAYBE CONCAVE. Scientist found out that ancient people use the vending machine this way: The panel with the hole was positioned horizontally, and the customer chose a best position above the hole to hold a coin. Then the customer dropped the coin. During the process of felling down, the coin WOULD NOT ROTATE in any direction. If the coin could go through the hole, the coin is considered “legal”. Otherwise, the coin is judged “illegal”. If the coin just merely touched the edges of the hole but was not blocked, it was considered as legal. For example, as shown in the sample input, a square coin with side length 5 can go through a triangle hole with sides of length 3, 4 and 5 , so it’s legal. <br><center><img src=/upload/hdu/3263/254-1004-1.jpg></center><br>Please note that coins and the panel are all considered as no thickness. ', 'The first line contains an integer T representing the number of test cases( 0 &lt; T &lt;= 20).<br>For each test case, the first line contains an integer N (3&lt;=N&lt;=20), representing the number of vertexes of the hole-polygon. <br>Next N lines describe the shape of the hole-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r1 and r2 ( -100 &lt;= r1,r2 &lt;=100), describing the position of a vertex.<br> <br>The next line contains an integer M (3&lt;=M&lt;=20), representing the number of vertexes of the coin-polygon. <br><br>Next M lines describe the shape of the coin-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r1 and r2 ( -100 &lt;= r1,r2 &lt;=100), describing the position of a vertex.<br><br>The positions mentioned above are relative coordinates but not absolute values. <br>', 'For each test case, output one line containing either the word “legal” or the word “illegal”, which represents that the coin can or can’t go through the hole.', '2\r\n4\r\n0 0\r\n4 0\r\n4 1\r\n0 1\r\n3\r\n0 4\r\n1 4\r\n1 0\r\n3\r\n0 0\r\n4 0\r\n0 3\r\n4\r\n0 0\r\n5 0\r\n5 5\r\n0 5', 'legal\r\nlegal', '', '', '2015-09-01', 1000, 2000, 32768, 32768, 0, 0, 0, 0, '', 'hdu', 1); args=[u'3263', 'Ancient vending machine', 'Though the story of Shaolong Xiang, the great time-traveler, is not recorded in the history, some recent discoveries show the possibility that the ancient mystery visitor might really exist. Several months ago, a strange machine was found together with some newly unearthed terra-cotta warriors. That machine looks like a modern machine and even has some electronic parts \xe2\x80\x94 that\xe2\x80\x99s why people take Mr. Xiang into consideration when guessing the origin of the strange machine. <br><br>After careful examinations, scientists finally figured out what the machine is -- it actually is a vending machine in Qin dynasty! There is a hole on a panel of the machine, and scientists are pretty sure that Qin people put their coins into the machine through that hole to buy things. As you know, there were too many different types of coins before Qin dynasty and Emperor Qin Shihuang didn\xe2\x80\x99t like that. But scientists found an announcement made by Qin Shihuang carved on the machine, saying that any coins which can go through the hole is still legal to use. Now your task is to determine whether a certain type of coin can be put into the hole\xe2\x80\x94from these results we might find some clues about the mystery time-traveler.<br><br>The hole on the panel is a polygon and all coins also have a shape of polygon. THEY ALL MAYBE CONCAVE. Scientist found out that ancient people use the vending machine this way: The panel with the hole was positioned horizontally, and the customer chose a best position above the hole to hold a coin. Then the customer dropped the coin. During the process of felling down, the coin WOULD NOT ROTATE in any direction. If the coin could go through the hole, the coin is considered \xe2\x80\x9clegal\xe2\x80\x9d. Otherwise, the coin is judged \xe2\x80\x9cillegal\xe2\x80\x9d. If the coin just merely touched the edges of the hole but was not blocked, it was considered as legal. For example, as shown in the sample input, a square coin with side length 5 can go through a triangle hole with sides of length 3, 4 and 5 , so it\xe2\x80\x99s legal. <br><center><img src=/upload/hdu/3263/254-1004-1.jpg></center><br>Please note that coins and the panel are all considered as no thickness. ', 'The first line contains an integer T representing the number of test cases( 0 &lt; T &lt;= 20).<br>For each test case, the first line contains an integer N (3&lt;=N&lt;=20), representing the number of vertexes of the hole-polygon. <br>Next N lines describe the shape of the hole-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r1 and r2 ( -100 &lt;= r1,r2 &lt;=100), describing the position of a vertex.<br> <br>The next line contains an integer M (3&lt;=M&lt;=20), representing the number of vertexes of the coin-polygon. <br><br>Next M lines describe the shape of the coin-polygon by listing positions of all vertexes in counterclockwise order. Each line contains two real numbers r1 and r2 ( -100 &lt;= r1,r2 &lt;=100), describing the position of a vertex.<br><br>The positions mentioned above are relative coordinates but not absolute values. <br>', 'For each test case, output one line containing either the word \xe2\x80\x9clegal\xe2\x80\x9d or the word \xe2\x80\x9cillegal\xe2\x80\x9d, which represents that the coin can or can\xe2\x80\x99t go through the hole.', '2\r\n4\r\n0 0\r\n4 0\r\n4 1\r\n0 1\r\n3\r\n0 4\r\n1 4\r\n1 0\r\n3\r\n0 0\r\n4 0\r\n0 3\r\n4\r\n0 0\r\n5 0\r\n5 5\r\n0 5', 'legal\r\nlegal', '', '', u'2015-09-01', 1000, 2000, 32768, 32768, False, 0, 0, 0, '', u'hdu', 1]
2015 Sep 01, Tue <03:20:28> log_main.py[line:15] INFO Download image <254-1004-1.jpg> over
2015 Sep 01, Tue <03:20:31> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:31> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:31> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '4242' AND `problem_problem`.`oj` = 'hdu'); args=(u'4242', u'hdu')
2015 Sep 01, Tue <03:20:31> utils.py[line:89] DEBUG (0.001) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('4242', 'Rancher\'s Gift', 'Rancher Joel has a  tract  of land in  the shape of a convex quadrilateral that  the wants to divide among his sons Al, Bob, Chas and Dave, who wish to continue ranching on their portions, and his daughter Emily, who wishes to grow vegetables on her portion.<br> <br>The center of the tract is most suitable for vegetable farming so Joel decides to divide the land by drawing lines from each corner (A, B, C, D in counter clockwise order) to the center of an opposing side (respectively A\', B\', C\' and D\') Each son would receive one of the triangular sections and Emily would receive the central quadrilateral section. As shown in the figure, Al\'s tract is to be bounded by the line from A to B, the line from A to the midpoint of BC and the line from B to the midpoint of CD\' Bob&amp;s  ract is to be bounded by the line from B to C, the line from B to the midpoint of CD and the line from C to the midpoint of DA, and so on. <br><center><img src=/upload/hdu/4242/C397-1007-1.jpg></center><br>Your job is to write a program that will help Rancher Joel determine the area of each child\'s tract and the length of the fence he will have to put around Emily\'s parcel to keep her brothers\' cows out of her crops.   <br> <br>For his problem, A will always be at (0, 0) and B will always be at (x, 0). Coordinates will be in rods (a rod is 16.5 feet).The returned areas should be in acres to 3 decimal places (an acre is 160 square rods) and the length of the fence should be in feet, rounded up to the next foot.', 'The first line of input contains a single integer P( 1 &lt;= P &lt;= 1000),which is the number of data sets that follow. Each data set is a single line that contains of a decimal integer followed by five (5) space separated floating-point values. The first (integer) value is the data set number, N. The floating-point values are B.x, C.x, C.y, D.x and D.y in that order (where V.x indicates the x coordinate of V and V.y indicates the y coordinate of V). Recall that the y coordinate of B is always zero (0). The supplied coordinates will always specify a valid convex quadrilateral.', 'For each data set there is a single line of output. It contains the data set number,  N , followed by a single space followed by five(5) space separated floating-point values to three(3) decimal place accuracy, followed by a single space and a decimal integer!  The floating-point values are the areas in acres of the properties of Al, Bob, Chas, Dave, and Emily respectively. The final integer is the length of fence in feet required to fence in Emily\'s property (rounded up to the next foot). ', '3\r\n1 200 250 150 -50 200\r\n2 200 200 100 0 100\r\n3 201.5 157.3 115.71 -44.2 115.71', '1 35.000 54.136 75.469 54.167 54.666 6382\r\n2 25.000 25.000 25.000 25.000 25.000 4589\r\n3 29.144 29.144 29.144 29.144 29.144 4937', '', '', '2015-09-01', 1000, 2000, 32768, 32768, 0, 0, 0, 0, '', 'hdu', 1); args=[u'4242', "Rancher's Gift", "Rancher Joel has a  tract  of land in  the shape of a convex quadrilateral that  the wants to divide among his sons Al, Bob, Chas and Dave, who wish to continue ranching on their portions, and his daughter Emily, who wishes to grow vegetables on her portion.<br> <br>The center of the tract is most suitable for vegetable farming so Joel decides to divide the land by drawing lines from each corner (A, B, C, D in counter clockwise order) to the center of an opposing side (respectively A', B', C' and D') Each son would receive one of the triangular sections and Emily would receive the central quadrilateral section. As shown in the figure, Al's tract is to be bounded by the line from A to B, the line from A to the midpoint of BC and the line from B to the midpoint of CD' Bob&amp;s  ract is to be bounded by the line from B to C, the line from B to the midpoint of CD and the line from C to the midpoint of DA, and so on. <br><center><img src=/upload/hdu/4242/C397-1007-1.jpg></center><br>Your job is to write a program that will help Rancher Joel determine the area of each child's tract and the length of the fence he will have to put around Emily's parcel to keep her brothers' cows out of her crops.   <br> <br>For his problem, A will always be at (0, 0) and B will always be at (x, 0). Coordinates will be in rods (a rod is 16.5 feet).The returned areas should be in acres to 3 decimal places (an acre is 160 square rods) and the length of the fence should be in feet, rounded up to the next foot.", 'The first line of input contains a single integer P( 1 &lt;= P &lt;= 1000),which is the number of data sets that follow. Each data set is a single line that contains of a decimal integer followed by five (5) space separated floating-point values. The first (integer) value is the data set number, N. The floating-point values are B.x, C.x, C.y, D.x and D.y in that order (where V.x indicates the x coordinate of V and V.y indicates the y coordinate of V). Recall that the y coordinate of B is always zero (0). The supplied coordinates will always specify a valid convex quadrilateral.', "For each data set there is a single line of output. It contains the data set number,  N , followed by a single space followed by five(5) space separated floating-point values to three(3) decimal place accuracy, followed by a single space and a decimal integer!  The floating-point values are the areas in acres of the properties of Al, Bob, Chas, Dave, and Emily respectively. The final integer is the length of fence in feet required to fence in Emily's property (rounded up to the next foot). ", '3\r\n1 200 250 150 -50 200\r\n2 200 200 100 0 100\r\n3 201.5 157.3 115.71 -44.2 115.71', '1 35.000 54.136 75.469 54.167 54.666 6382\r\n2 25.000 25.000 25.000 25.000 25.000 4589\r\n3 29.144 29.144 29.144 29.144 29.144 4937', '', '', u'2015-09-01', 1000, 2000, 32768, 32768, False, 0, 0, 0, '', u'hdu', 1]
2015 Sep 01, Tue <03:20:32> log_main.py[line:15] INFO Download image <C397-1007-1.jpg> over
2015 Sep 01, Tue <03:20:40> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:40> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:40> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1027' AND `problem_problem`.`oj` = 'poj'); args=(u'1027', u'poj')
2015 Sep 01, Tue <03:20:41> utils.py[line:89] DEBUG (0.001) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('1027', 'The Same Game', 'The game named \"Same\" is a single person game played on a 10 \\Theta 15 board. Each square contains a ball colored red (R), green (G), or blue (B). Two balls belong to the same cluster if they have the same color, and one can be reached from another by following balls of the same color in the four directions up, down, left, and right. At each step of the game, the player chooses a ball whose cluster has at least two balls and removes all balls in the cluster from the board. Then, the board is \"compressed\" in two steps: \r<br>1. Shift the remaining balls in each column down to fill the empty spaces. The order of the balls in each column is preserved. \r<br>2. If a column becomes empty, shift the remaining columns to the left as far as possible. The order of the columns is preserved. \r<br>For example, choosing the ball at the bottom left corner in the sub-board below causes: \r<br><img src=\"/upload/poj/1027/game.jpg\">\r<br>The objective of the game is to remove every ball from the board, and the game is over when every ball is removed or when every cluster has only one ball. The scoring of each game is as follows. The player starts with a score of 0. When a cluster of m balls is removed, the player\'s score increases by (m-2)^2 . A bonus of 1000 is given if every ball is removed at the end of the game. \r<br>You suspect that a good strategy might be to choose the ball that gives the largest possible cluster at each step, and you want to test this strategy by writing a program to simulate games played using this strategy. If there are two or more balls to choose from, the program should choose the leftmost ball giving the largest cluster. If there is still a tie, it should choose the bottommost ball of these leftmost balls. ', 'You will be given a number of games in the input. The first line of input contains a positive integer giving the number of games to follow. The initial arrangement of the balls of each game is given one row at a time, from top to bottom. Each row contains 15 characters, each of which is one of \"R\", \"G\", or \"B\", specifying the colors of the balls in the row from left to right. A blank line precedes each game. ', 'For each game, print the game number, followed by a new line, followed by information about each move, followed by the final score. Each move should be printed in the format: \r<br>Move x at (r,c): removed b balls of color C, got s points. \r<br>where x is the move number, r and c are the row number and column number of the chosen ball, respectively. The rows are numbered from 1 to 10 from the bottom, and columns are numbered from 1 to 15 from the left. b is the number of balls in the cluster removed. C is one of \"R\", \"G\", or \"B\", indicating the color of the balls removed. s is the score for this move. The score does not include the 1000 point bonus if all the balls are removed after the move. \r<br>The final score should be reported as follows: \r<br>Final score: s, with b balls remaining. \r<br>Insert a blank line between the output of each game. Use the plural forms \"balls\" and \"points\" even if the corresponding value is 1. ', '3 \r\nRGGBBGGRBRRGGBG \r\nRBGRBGRBGRBGRBG\r\nRRRRGBBBRGGRBBB\r\nGGRGBGGBRRGGGBG\r\nGBGGRRRRRBGGRRR\r\nBBBBBBBBBBBBBBB\r\nBBBBBBBBBBBBBBB\r\nRRRRRRRRRRRRRRR\r\nRRRRRRGGGGRRRRR\r\nGGGGGGGGGGGGGGG\r\n\r\nRRRRRRRRRRRRRRR\r\nRRRRRRRRRRRRRRR\r\nGGGGGGGGGGGGGGG\r\nGGGGGGGGGGGGGGG\r\nBBBBBBBBBBBBBBB\r\nBBBBBBBBBBBBBBB\r\nRRRRRRRRRRRRRRR\r\nRRRRRRRRRRRRRRR \r\nGGGGGGGGGGGGGGG\r\nGGGGGGGGGGGGGGG\r\n\r\nRBGRBGRBGRBGRBG\r\nBGRBGRBGRBGRBGR\r\nGRBGRBGRBGRBGRB\r\nRBGRBGRBGRBGRBG\r\nBGRBGRBGRBGRBGR\r\nGRBGRBGRBGRBGRB\r\nRBGRBGRBGRBGRBG\r\nBGRBGRBGRBGRBGR\r\nGRBGRBGRBGRBGRB\r\nRBGRBGRBGRBGRBG', 'Game 1: \r\n\r\nMove 1 at (4,1): removed 32 balls of color B, got 900 points. \r\nMove 2 at (2,1): removed 39 balls of color R, got 1369 points. \r\nMove 3 at (1,1): removed 37 balls of color G, got 1225 points. \r\nMove 4 at (3,4): removed 11 balls of color B, got 81 points. \r\nMove 5 at (1,1): removed 8 balls of color R, got 36 points. \r\nMove 6 at (2,1): removed 6 balls of color G, got 16 points. \r\nMove 7 at (1,6): removed 6 balls of color B, got 16 points. \r\nMove 8 at (1,2): removed 5 balls of color R, got 9 points. \r\nMove 9 at (1,2): removed 5 balls of color G, got 9 points. \r\nFinal score: 3661, with 1 balls remaining. \r\n\r\nGame 2: \r\n\r\nMove 1 at (1,1): removed 30 balls of color G, got 784 points. \r\nMove 2 at (1,1): removed 30 balls of color R, got 784 points. \r\nMove 3 at (1,1): removed 30 balls of color B, got 784 points. \r\nMove 4 at (1,1): removed 30 balls of color G, got 784 points. \r\nMove 5 at (1,1): removed 30 balls of color R, got 784 points. \r\nFinal score: 4920, with 0 balls remaining. \r\n\r\nGame 3: \r\n\r\nFinal score: 0, with 150 balls remaining. ', '', 'East Central North America 1999', '2015-09-01', 1000, 2000, 10000, 10000, 0, 0, 0, 0, '', 'poj', 1); args=[u'1027', 'The Same Game', 'The game named "Same" is a single person game played on a 10 \\Theta 15 board. Each square contains a ball colored red (R), green (G), or blue (B). Two balls belong to the same cluster if they have the same color, and one can be reached from another by following balls of the same color in the four directions up, down, left, and right. At each step of the game, the player chooses a ball whose cluster has at least two balls and removes all balls in the cluster from the board. Then, the board is "compressed" in two steps: \r<br>1. Shift the remaining balls in each column down to fill the empty spaces. The order of the balls in each column is preserved. \r<br>2. If a column becomes empty, shift the remaining columns to the left as far as possible. The order of the columns is preserved. \r<br>For example, choosing the ball at the bottom left corner in the sub-board below causes: \r<br><img src="/upload/poj/1027/game.jpg">\r<br>The objective of the game is to remove every ball from the board, and the game is over when every ball is removed or when every cluster has only one ball. The scoring of each game is as follows. The player starts with a score of 0. When a cluster of m balls is removed, the player\'s score increases by (m-2)^2 . A bonus of 1000 is given if every ball is removed at the end of the game. \r<br>You suspect that a good strategy might be to choose the ball that gives the largest possible cluster at each step, and you want to test this strategy by writing a program to simulate games played using this strategy. If there are two or more balls to choose from, the program should choose the leftmost ball giving the largest cluster. If there is still a tie, it should choose the bottommost ball of these leftmost balls. ', 'You will be given a number of games in the input. The first line of input contains a positive integer giving the number of games to follow. The initial arrangement of the balls of each game is given one row at a time, from top to bottom. Each row contains 15 characters, each of which is one of "R", "G", or "B", specifying the colors of the balls in the row from left to right. A blank line precedes each game. ', 'For each game, print the game number, followed by a new line, followed by information about each move, followed by the final score. Each move should be printed in the format: \r<br>Move x at (r,c): removed b balls of color C, got s points. \r<br>where x is the move number, r and c are the row number and column number of the chosen ball, respectively. The rows are numbered from 1 to 10 from the bottom, and columns are numbered from 1 to 15 from the left. b is the number of balls in the cluster removed. C is one of "R", "G", or "B", indicating the color of the balls removed. s is the score for this move. The score does not include the 1000 point bonus if all the balls are removed after the move. \r<br>The final score should be reported as follows: \r<br>Final score: s, with b balls remaining. \r<br>Insert a blank line between the output of each game. Use the plural forms "balls" and "points" even if the corresponding value is 1. ', '3 \r\nRGGBBGGRBRRGGBG \r\nRBGRBGRBGRBGRBG\r\nRRRRGBBBRGGRBBB\r\nGGRGBGGBRRGGGBG\r\nGBGGRRRRRBGGRRR\r\nBBBBBBBBBBBBBBB\r\nBBBBBBBBBBBBBBB\r\nRRRRRRRRRRRRRRR\r\nRRRRRRGGGGRRRRR\r\nGGGGGGGGGGGGGGG\r\n\r\nRRRRRRRRRRRRRRR\r\nRRRRRRRRRRRRRRR\r\nGGGGGGGGGGGGGGG\r\nGGGGGGGGGGGGGGG\r\nBBBBBBBBBBBBBBB\r\nBBBBBBBBBBBBBBB\r\nRRRRRRRRRRRRRRR\r\nRRRRRRRRRRRRRRR \r\nGGGGGGGGGGGGGGG\r\nGGGGGGGGGGGGGGG\r\n\r\nRBGRBGRBGRBGRBG\r\nBGRBGRBGRBGRBGR\r\nGRBGRBGRBGRBGRB\r\nRBGRBGRBGRBGRBG\r\nBGRBGRBGRBGRBGR\r\nGRBGRBGRBGRBGRB\r\nRBGRBGRBGRBGRBG\r\nBGRBGRBGRBGRBGR\r\nGRBGRBGRBGRBGRB\r\nRBGRBGRBGRBGRBG', 'Game 1: \r\n\r\nMove 1 at (4,1): removed 32 balls of color B, got 900 points. \r\nMove 2 at (2,1): removed 39 balls of color R, got 1369 points. \r\nMove 3 at (1,1): removed 37 balls of color G, got 1225 points. \r\nMove 4 at (3,4): removed 11 balls of color B, got 81 points. \r\nMove 5 at (1,1): removed 8 balls of color R, got 36 points. \r\nMove 6 at (2,1): removed 6 balls of color G, got 16 points. \r\nMove 7 at (1,6): removed 6 balls of color B, got 16 points. \r\nMove 8 at (1,2): removed 5 balls of color R, got 9 points. \r\nMove 9 at (1,2): removed 5 balls of color G, got 9 points. \r\nFinal score: 3661, with 1 balls remaining. \r\n\r\nGame 2: \r\n\r\nMove 1 at (1,1): removed 30 balls of color G, got 784 points. \r\nMove 2 at (1,1): removed 30 balls of color R, got 784 points. \r\nMove 3 at (1,1): removed 30 balls of color B, got 784 points. \r\nMove 4 at (1,1): removed 30 balls of color G, got 784 points. \r\nMove 5 at (1,1): removed 30 balls of color R, got 784 points. \r\nFinal score: 4920, with 0 balls remaining. \r\n\r\nGame 3: \r\n\r\nFinal score: 0, with 150 balls remaining. ', '', 'East Central North America 1999', u'2015-09-01', 1000, 2000, 10000, 10000, False, 0, 0, 0, '', u'poj', 1]
2015 Sep 01, Tue <03:20:41> log_main.py[line:15] INFO Download image <game.jpg> over
2015 Sep 01, Tue <03:20:43> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:43> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:43> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1121' AND `problem_problem`.`oj` = 'poj'); args=(u'1121', u'poj')
2015 Sep 01, Tue <03:20:43> utils.py[line:89] DEBUG (0.001) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('1121', 'Algernon\'s Noxious Emissions', 'One of the greatest alchemists of the lower Middle Renaissance, Algernon da Vinci (one of Leonardo\'s lesserknown cousins), had the foresight to construct his chemical works directly over a fast-running stream. Through a series of clever pipes and sluices, he routed portions of the stream past each of the tables where his alchemists prepared their secret brews, allowing them to dispose of their chemical byproducts into the waters flowing by the table. \r<br>\r<br>As Algernon\'s business grew, he even added additional floors to his factory, with water lifted to the higher floors by treadmill-powered pumps (much to the dismay of the apprentices who found themselves assigned to pump duty). The pipework for the entire disposal system became quite complex. It was even rumored by some that the pipes actually circled back in some places, so that a particularly odorous compound flushed away from one table might return to that very same spot a few minutes later. \r<br>\r<br>All was not well, however. Algernon\'s factory suffered from a series of mishaps, minor explosions, gas clouds, etc. It became obvious that chemicals dumped at one table might react violently with other chemicals dumped from another table downstream. Algernon realized that he needed to trace the possible chemical flows through his factory. \r<br>\r<br>Write a program to aid Algernon in this task. To preserve the secrecy of the chemical processes that are Algernon\'s stock in trade, all chemicals will be identified by a single upper-case letter. All tables are identified by positive numbers in the range 1...N, where N is the number of tables. \r<br>', 'Line 1: \r<br># of work tables, integer (henceforth referred to as N). N < 50 \r<br>\r<br>Lines 2...N+1 \r<br>For each table: \r<br>?a list of chemicals dumped into the stream at that table, followed by \r<br>?a list of chemicals that, if they appeared at that table, would be harmlessly neutralized by the reactions at that table, allowing no further trace of that chemical to flow downstream (we will assume that the rate of work at each table can be adjusted as necessary to guarantee total neutralization of whatever amount of these chemicals arrive from upstream). \r<br>\r<br>Each of these lists is given as a series of upper-case alphabetic characters. The only exception is that a special list, consisting of a single \'.\' character, will be used to denote an empty list. The two lists are separated from one other by one or more blanks. The same chemical will never appear in both lists. \r<br>\r<br>Lines N+2...? \r<br>These lines provide a description of the pipeworks. Each line contains a pair of integers in the range 1...N, separated by one or more blanks: \r<br>I J \r<br>meaning that the table number I is upstream of table number J--anything dumped into the stream at table I or that arrives in the stream at table I and is not neutralized can then be counted on to arrive at table J. \r<br>\r<br>No (I,J) pair will be listed more than once, but the pairs may occur in any order. I and J will never be the same number. \r<br>\r<br>The end of input is signaled by a pair of zeros: \r<br>0 0 \r<br>\r<br>Note that if a table only receives water directly from the stream entering the building, that table will never occur in the second position of a pair. Similarly, any table that discharges only into the stream leaving the building will never occur in the first position of a pair. \r<br>', 'There will be N lines of output, one for each table, in the same order as they appeared in the program input. Each line will contain the list of chemicals that can be expected at that table\'s output. This list will be printed as a (possibly empty) list of upper-case alphabetic characters between two colons (:). No empty spaces should be printed on the line. The characters in the list should be sorted in alphabetic order. \r<br>\r<br>This is the picture for the sample input date:\r<br><center><img src=/upload/poj/1121/1121_1.gif></center>', '4 \r\nAB C \r\nC BDA \r\nBCD . \r\n. A \r\n1 2 \r\n2 4 \r\n3 1 \r\n1 3 \r\n3 4 \r\n0 0 ', ':ABD: \r\n:C: \r\n:ABCD: \r\n:BCD:', '', 'Mid-Atlantic 2001', '2015-09-01', 1000, 2000, 10000, 10000, 0, 0, 0, 0, '', 'poj', 1); args=[u'1121', "Algernon's Noxious Emissions", "One of the greatest alchemists of the lower Middle Renaissance, Algernon da Vinci (one of Leonardo's lesserknown cousins), had the foresight to construct his chemical works directly over a fast-running stream. Through a series of clever pipes and sluices, he routed portions of the stream past each of the tables where his alchemists prepared their secret brews, allowing them to dispose of their chemical byproducts into the waters flowing by the table. \r<br>\r<br>As Algernon's business grew, he even added additional floors to his factory, with water lifted to the higher floors by treadmill-powered pumps (much to the dismay of the apprentices who found themselves assigned to pump duty). The pipework for the entire disposal system became quite complex. It was even rumored by some that the pipes actually circled back in some places, so that a particularly odorous compound flushed away from one table might return to that very same spot a few minutes later. \r<br>\r<br>All was not well, however. Algernon's factory suffered from a series of mishaps, minor explosions, gas clouds, etc. It became obvious that chemicals dumped at one table might react violently with other chemicals dumped from another table downstream. Algernon realized that he needed to trace the possible chemical flows through his factory. \r<br>\r<br>Write a program to aid Algernon in this task. To preserve the secrecy of the chemical processes that are Algernon's stock in trade, all chemicals will be identified by a single upper-case letter. All tables are identified by positive numbers in the range 1...N, where N is the number of tables. \r<br>", "Line 1: \r<br># of work tables, integer (henceforth referred to as N). N < 50 \r<br>\r<br>Lines 2...N+1 \r<br>For each table: \r<br>?a list of chemicals dumped into the stream at that table, followed by \r<br>?a list of chemicals that, if they appeared at that table, would be harmlessly neutralized by the reactions at that table, allowing no further trace of that chemical to flow downstream (we will assume that the rate of work at each table can be adjusted as necessary to guarantee total neutralization of whatever amount of these chemicals arrive from upstream). \r<br>\r<br>Each of these lists is given as a series of upper-case alphabetic characters. The only exception is that a special list, consisting of a single '.' character, will be used to denote an empty list. The two lists are separated from one other by one or more blanks. The same chemical will never appear in both lists. \r<br>\r<br>Lines N+2...? \r<br>These lines provide a description of the pipeworks. Each line contains a pair of integers in the range 1...N, separated by one or more blanks: \r<br>I J \r<br>meaning that the table number I is upstream of table number J--anything dumped into the stream at table I or that arrives in the stream at table I and is not neutralized can then be counted on to arrive at table J. \r<br>\r<br>No (I,J) pair will be listed more than once, but the pairs may occur in any order. I and J will never be the same number. \r<br>\r<br>The end of input is signaled by a pair of zeros: \r<br>0 0 \r<br>\r<br>Note that if a table only receives water directly from the stream entering the building, that table will never occur in the second position of a pair. Similarly, any table that discharges only into the stream leaving the building will never occur in the first position of a pair. \r<br>", "There will be N lines of output, one for each table, in the same order as they appeared in the program input. Each line will contain the list of chemicals that can be expected at that table's output. This list will be printed as a (possibly empty) list of upper-case alphabetic characters between two colons (:). No empty spaces should be printed on the line. The characters in the list should be sorted in alphabetic order. \r<br>\r<br>This is the picture for the sample input date:\r<br><center><img src=/upload/poj/1121/1121_1.gif></center>", '4 \r\nAB C \r\nC BDA \r\nBCD . \r\n. A \r\n1 2 \r\n2 4 \r\n3 1 \r\n1 3 \r\n3 4 \r\n0 0 ', ':ABD: \r\n:C: \r\n:ABCD: \r\n:BCD:', '', 'Mid-Atlantic 2001', u'2015-09-01', 1000, 2000, 10000, 10000, False, 0, 0, 0, '', u'poj', 1]
2015 Sep 01, Tue <03:20:43> log_main.py[line:15] INFO Download image <1121_1.gif> over
2015 Sep 01, Tue <03:20:48> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:48> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:48> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1232' AND `problem_problem`.`oj` = 'poj'); args=(u'1232', u'poj')
2015 Sep 01, Tue <03:20:48> utils.py[line:89] DEBUG (0.001) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('1232', 'Microfiches', 'Before computers were widely used, there was another fairly convenient way of archiving data, where librarians archived periodicals on microfiches. A microfiche is a rectangular card made of high-resolution magnet that can store the image of a newspaper page on an area as small as one square millimeter. One may view the newspaper from a microfiche by a device with strong magnification capability. In order to keep a large microfiche collection in perfect order and provide good search service to the users, Gholam, one ingenious librarian, invented a microfiche storage machine.\r<br>\r<br>There are n microfiches in the collection, and each of them has a unique id number. There is a catalogue that allows one to easily find the id number of the microfiche desired. \r<br>\r<br>Gholam proposes to put each microfiche in a special frame, as shown in the figure below. The upper left corner of the frame is clipped, to make sure that there is only one orientation possible for a framed microfiche in its stack (explained below).\r<br><center><img src=/upload/poj/1232/1232_1.jpg>\r<br>Figure 1: A microfiche with id number 010011, mounted on a frame. The shaded black portion is the microfiche and the surrounding white part is the frame containing the microfiche. \r<br></center>\r<br>The id number of a microfiche is encoded, in binary, on the frame as follows. Let g be the number of bits necessary to represent an id number, indexed from 0 to g – 1. The left side of the frame contains g information cells. A “1” is represented as a dent on the information cell, and a “0” is represented as a hole. The first (uppermost) information cell corresponds to the most significant bit of the id number; the last information cell corresponds to its least significant bit. See the above figure for an illustration. \r<br>\r<br>The microfiche storage machine contains three stacks, stack 0, stack 1, and stack 2, capable of holding n microfiches each. If you look at these stacks from the top, each of them is shaped like a rectangle with the upper left corner clipped. Initially, stack 0 is used for storage of microfiches; stacks 1 and 2 are only used for performing the move operation described below. The machine used to perform more operations, but move is the only operation that is considered in this problem.\r<br><center><img src=/upload/poj/1232/1232_2.jpg>\r<br>Figure 2: The microfiche with a hole in position 3 gets pulled at (A), and the one with a dent in position 3 stays in the stack (B)\r<br></center>\r<br>move (i, k,  j):  This operation moves all the microfiches with a \"0\" in information cell k (0 <= k <= g – 1) from stack i to the top of stack j such that the original relative ordering of the pulled microfiches from stack i , and that of the ones originally in stack j are preserved. In practice, a rod is inserted through all the holes (encoded \"0\"s) and dents (encoded \"1\"s) of the information cells in position k. Then the machine pulls the rod to the left, and thus the microfiches that have a hole (a \"0\") at position k will be pulled out (e.g. the microfiche of Figure 2.A), but those which have a dent (\"1\") in position k (e.g. Fig 2.B) would be left in the stack.\r<br>\r<br>Gholam wants to find a certain microfiche with a known id number. He achieves this goal by performing a sequence of move operations, such that after performing the operations, there will be one stack that holds the desired microfiche only. Your task is to write a program to find the minimum length of such a sequence.\r<br>', 'The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test data are two integers n (1 <= n <= 10000) and g (1 <= g <= 15) which are the number of microfiches and the number of bits, respectively. Following the first line, there are n lines each containing the binary representation of a g-bit integer, with no leading or trailing spaces. The desired microfiche is the first one appearing in the test case.\r<br>', 'There should be one output line per test case containing the minimum number of move operations needed to find the desired microfiche. \r<br>', '1\r\n4 3\r\n010\r\n011\r\n100\r\n110', '2', '', 'Tehran 2002 Preliminary', '2015-09-01', 1000, 2000, 10000, 10000, 0, 0, 0, 0, '', 'poj', 1); args=[u'1232', 'Microfiches', 'Before computers were widely used, there was another fairly convenient way of archiving data, where librarians archived periodicals on microfiches. A microfiche is a rectangular card made of high-resolution magnet that can store the image of a newspaper page on an area as small as one square millimeter. One may view the newspaper from a microfiche by a device with strong magnification capability. In order to keep a large microfiche collection in perfect order and provide good search service to the users, Gholam, one ingenious librarian, invented a microfiche storage machine.\r<br>\r<br>There are n microfiches in the collection, and each of them has a unique id number. There is a catalogue that allows one to easily find the id number of the microfiche desired. \r<br>\r<br>Gholam proposes to put each microfiche in a special frame, as shown in the figure below. The upper left corner of the frame is clipped, to make sure that there is only one orientation possible for a framed microfiche in its stack (explained below).\r<br><center><img src=/upload/poj/1232/1232_1.jpg>\r<br>Figure 1: A microfiche with id number 010011, mounted on a frame. The shaded black portion is the microfiche and the surrounding white part is the frame containing the microfiche. \r<br></center>\r<br>The id number of a microfiche is encoded, in binary, on the frame as follows. Let g be the number of bits necessary to represent an id number, indexed from 0 to g \xe2\x80\x93 1. The left side of the frame contains g information cells. A \xe2\x80\x9c1\xe2\x80\x9d is represented as a dent on the information cell, and a \xe2\x80\x9c0\xe2\x80\x9d is represented as a hole. The first (uppermost) information cell corresponds to the most significant bit of the id number; the last information cell corresponds to its least significant bit. See the above figure for an illustration. \r<br>\r<br>The microfiche storage machine contains three stacks, stack 0, stack 1, and stack 2, capable of holding n microfiches each. If you look at these stacks from the top, each of them is shaped like a rectangle with the upper left corner clipped. Initially, stack 0 is used for storage of microfiches; stacks 1 and 2 are only used for performing the move operation described below. The machine used to perform more operations, but move is the only operation that is considered in this problem.\r<br><center><img src=/upload/poj/1232/1232_2.jpg>\r<br>Figure 2: The microfiche with a hole in position 3 gets pulled at (A), and the one with a dent in position 3 stays in the stack (B)\r<br></center>\r<br>move (i, k,  j):  This operation moves all the microfiches with a "0" in information cell k (0 <= k <= g \xe2\x80\x93 1) from stack i to the top of stack j such that the original relative ordering of the pulled microfiches from stack i , and that of the ones originally in stack j are preserved. In practice, a rod is inserted through all the holes (encoded "0"s) and dents (encoded "1"s) of the information cells in position k. Then the machine pulls the rod to the left, and thus the microfiches that have a hole (a "0") at position k will be pulled out (e.g. the microfiche of Figure 2.A), but those which have a dent ("1") in position k (e.g. Fig 2.B) would be left in the stack.\r<br>\r<br>Gholam wants to find a certain microfiche with a known id number. He achieves this goal by performing a sequence of move operations, such that after performing the operations, there will be one stack that holds the desired microfiche only. Your task is to write a program to find the minimum length of such a sequence.\r<br>', 'The first line of the input file contains a single integer t (1 <= t <= 10), the number of test cases, followed by the input data for each test case. The first line of each test data are two integers n (1 <= n <= 10000) and g (1 <= g <= 15) which are the number of microfiches and the number of bits, respectively. Following the first line, there are n lines each containing the binary representation of a g-bit integer, with no leading or trailing spaces. The desired microfiche is the first one appearing in the test case.\r<br>', 'There should be one output line per test case containing the minimum number of move operations needed to find the desired microfiche. \r<br>', '1\r\n4 3\r\n010\r\n011\r\n100\r\n110', '2', '', 'Tehran 2002 Preliminary', u'2015-09-01', 1000, 2000, 10000, 10000, False, 0, 0, 0, '', u'poj', 1]
2015 Sep 01, Tue <03:20:48> log_main.py[line:15] INFO Download image <1232_1.jpg> over
2015 Sep 01, Tue <03:20:48> log_main.py[line:15] INFO Download image <1232_2.jpg> over
2015 Sep 01, Tue <03:20:51> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:51> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:51> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2296' AND `problem_problem`.`oj` = 'poj'); args=(u'2296', u'poj')
2015 Sep 01, Tue <03:20:51> utils.py[line:89] DEBUG (0.000) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('2296', 'Map Labeler', 'Map generation is a difficult task in cartography. A vital part of such task is automatic labeling of the cities in a map; where for each city there is text label to be attached to its location, so that no two labels overlap. In this problem, we are concerned with a simple case of automatic map labeling.\r<br>\r<br>Assume that each city is a point on the plane, and its label is a text bounded in a square with edges parallel to x and y axis. The label of each city should be located such that the city point appears exactly in the middle of the top or bottom edges of the label. In a good labeling, the square labels are all of the same size, and no two labels overlap, although they may share one edge. Figure 1 depicts an example of a good labeling (the texts of the labels are not shown.)\r<br>\r<br>Given the coordinates of all city points on the map as integer values, you are to find the maximum label size (an integer value) such that a good labeling exists for the map.\r<br><center><img src=/upload/poj/2296/2296_1.jpg></center>', 'The first line contains a single integer t (1 <= t <= 10), the number of test cases. Each test case starts with a line containing an integer m (3 ≤ m ≤ 100), the number of cities followed by m lines of data each containing a pair of integers; the first integer (X) is the x and the second one (Y) is the y coordinates of one city on the map (-10000 ≤X, Y≤ 10000). Note that no two cities have the same (x, y) coordinates.', 'The output will be one line per each test case containing the maximum possible label size (an integer value) for a good labeling.', '1\r\n6\r\n1 1\r\n2 3\r\n3 2\r\n4 4\r\n10 4\r\n2 5\r\n', '2', '', 'Tehran 2003', '2015-09-01', 1000, 2000, 65536, 65536, 0, 0, 0, 0, '', 'poj', 1); args=[u'2296', 'Map Labeler', 'Map generation is a difficult task in cartography. A vital part of such task is automatic labeling of the cities in a map; where for each city there is text label to be attached to its location, so that no two labels overlap. In this problem, we are concerned with a simple case of automatic map labeling.\r<br>\r<br>Assume that each city is a point on the plane, and its label is a text bounded in a square with edges parallel to x and y axis. The label of each city should be located such that the city point appears exactly in the middle of the top or bottom edges of the label. In a good labeling, the square labels are all of the same size, and no two labels overlap, although they may share one edge. Figure 1 depicts an example of a good labeling (the texts of the labels are not shown.)\r<br>\r<br>Given the coordinates of all city points on the map as integer values, you are to find the maximum label size (an integer value) such that a good labeling exists for the map.\r<br><center><img src=/upload/poj/2296/2296_1.jpg></center>', 'The first line contains a single integer t (1 <= t <= 10), the number of test cases. Each test case starts with a line containing an integer m (3 \xe2\x89\xa4 m \xe2\x89\xa4 100), the number of cities followed by m lines of data each containing a pair of integers; the first integer (X) is the x and the second one (Y) is the y coordinates of one city on the map (-10000 \xe2\x89\xa4X, Y\xe2\x89\xa4 10000). Note that no two cities have the same (x, y) coordinates.', 'The output will be one line per each test case containing the maximum possible label size (an integer value) for a good labeling.', '1\r\n6\r\n1 1\r\n2 3\r\n3 2\r\n4 4\r\n10 4\r\n2 5\r\n', '2', '', 'Tehran 2003', u'2015-09-01', 1000, 2000, 65536, 65536, False, 0, 0, 0, '', u'poj', 1]
2015 Sep 01, Tue <03:20:51> log_main.py[line:15] INFO Download image <2296_1.jpg> over
2015 Sep 01, Tue <03:20:54> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:54> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:20:54> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2322' AND `problem_problem`.`oj` = 'poj'); args=(u'2322', u'poj')
2015 Sep 01, Tue <03:20:57> utils.py[line:89] DEBUG (0.001) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('2322', 'PLANKS', 'Build a bridge over a swamp by connecting tree stumps with planks.\r<br>\r<br>You are being chased by cannibals and you must figure out a way to get across a crocodile-infested swamp. The swamp contains tree stumps which are thankfully spaced on a regular, 10x10, grid, where each grid point is 1 foot apart. In addition, there are thankfully some planks nearby that can be placed across the tree stumps. The tree stump at the upper left corner of the grid is on land, as is the tree stump on the opposite bank of the swamp at the lower right. You must figure out a layout of the planks that will get you across the swamp. Each plank can only be used once and must start and end on a tree stump. In addition, the planks must follow the grid horizontally or vertically -- no diagonally placed planks are allowed. This scenario is illustrated by the following figure.\r<br><img src=/upload/poj/2322/2322_1.jpg>\r<br>A given problem may have more than one solution, but you are required to find only one solution. Your solution does not have to be the most efficient, and you can use any combination of the planks. A valid solution can contain planks that cross over each other.', 'The input contains one or more problems for a given swamp. The swamp is defined as a 10 by 10 grid of characters. Each period (\".\") represents open space and each asterik (\"*\") represents a stump. Each plank problem is defined on one input line after the swamp definition. The first number on the line is the number of planks available (max of 20). The remaining numbers are the lengths of the available planks. Each plank is assigned a number based on its order in the list. For example, in line 11, plank 1 is 9 ft long, plank 2 is 9 ft long, plank 3 is 5 ft long, and plank 4 is 8 ft long.', 'Each line of the output contains the placement of one plank to a specific stump, as shown in the sample output below. (Use the exact same wording and formating for your output.) The plank order given by the output should take you from stump (1,1) to stump (10,10). If no solution is possible with the specified planks, print \"no solution possible.\" Print a single blank line after each problem solution.', '*...*....*\r\n..........\r\n**.*.*....\r\n..........\r\n..*....*..\r\n.....*....\r\n..........\r\n...*......\r\n..........\r\n..*....*.*\r\n4  9 9 5 8\r\n3  9 2 3\r\n8  2 3 4 5 6 7 8 9\r\n', 'place plank 1 to stump (1,10)\r\nplace plank 2 to stump (10,10)\r\n\r\nno solution possible\r\n\r\nplace plank 3 to stump (1,5)\r\nplace plank 4 to stump (1,10)\r\nplace plank 8 to stump (10,10)\r\n', '', 'Rocky Mountain 2003', '2015-09-01', 1000, 2000, 65536, 65536, 0, 0, 0, 0, '', 'poj', 1); args=[u'2322', 'PLANKS', 'Build a bridge over a swamp by connecting tree stumps with planks.\r<br>\r<br>You are being chased by cannibals and you must figure out a way to get across a crocodile-infested swamp. The swamp contains tree stumps which are thankfully spaced on a regular, 10x10, grid, where each grid point is 1 foot apart. In addition, there are thankfully some planks nearby that can be placed across the tree stumps. The tree stump at the upper left corner of the grid is on land, as is the tree stump on the opposite bank of the swamp at the lower right. You must figure out a layout of the planks that will get you across the swamp. Each plank can only be used once and must start and end on a tree stump. In addition, the planks must follow the grid horizontally or vertically -- no diagonally placed planks are allowed. This scenario is illustrated by the following figure.\r<br><img src=/upload/poj/2322/2322_1.jpg>\r<br>A given problem may have more than one solution, but you are required to find only one solution. Your solution does not have to be the most efficient, and you can use any combination of the planks. A valid solution can contain planks that cross over each other.', 'The input contains one or more problems for a given swamp. The swamp is defined as a 10 by 10 grid of characters. Each period (".") represents open space and each asterik ("*") represents a stump. Each plank problem is defined on one input line after the swamp definition. The first number on the line is the number of planks available (max of 20). The remaining numbers are the lengths of the available planks. Each plank is assigned a number based on its order in the list. For example, in line 11, plank 1 is 9 ft long, plank 2 is 9 ft long, plank 3 is 5 ft long, and plank 4 is 8 ft long.', 'Each line of the output contains the placement of one plank to a specific stump, as shown in the sample output below. (Use the exact same wording and formating for your output.) The plank order given by the output should take you from stump (1,1) to stump (10,10). If no solution is possible with the specified planks, print "no solution possible." Print a single blank line after each problem solution.', '*...*....*\r\n..........\r\n**.*.*....\r\n..........\r\n..*....*..\r\n.....*....\r\n..........\r\n...*......\r\n..........\r\n..*....*.*\r\n4  9 9 5 8\r\n3  9 2 3\r\n8  2 3 4 5 6 7 8 9\r\n', 'place plank 1 to stump (1,10)\r\nplace plank 2 to stump (10,10)\r\n\r\nno solution possible\r\n\r\nplace plank 3 to stump (1,5)\r\nplace plank 4 to stump (1,10)\r\nplace plank 8 to stump (10,10)\r\n', '', 'Rocky Mountain 2003', u'2015-09-01', 1000, 2000, 65536, 65536, False, 0, 0, 0, '', u'poj', 1]
2015 Sep 01, Tue <03:20:57> log_main.py[line:15] INFO Download image <2322_1.jpg> over
2015 Sep 01, Tue <03:21:00> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:00> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:00> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '2364' AND `problem_problem`.`oj` = 'poj'); args=(u'2364', u'poj')
2015 Sep 01, Tue <03:21:00> utils.py[line:89] DEBUG (0.002) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('2364', 'Faucet Flow', '<img src=/upload/poj/2364/2364_1.jpg align=right>A faucet is pouring water into a long, thin aquarium with various vertical dividers (walls) in it. The aquarium is initially empty, and its bottom is perfectly level. How long will it take for water to spill over its left- or right-most divider? The faucet is above location x=0, and the dividers are located at x=-1, -3, -5, ..., leftx and 1, 3, 5, ..., rightx. The dividers are attached perpendicular to the floor and sides of the aquarium, and have various heights. The aquarium\'s length is greater than rightx-leftx, its walls are higher than the highest divider, and its width is 1 unit everywhere. Water pours from the faucet at a rate of 1 cubic unit per second. [You may assume that water is an ideal liquid: it always flows downhill and if it cannot flow downhill it spreads at an equal rate in all horizontal directions.] ', 'Each test case consists of two integers leftx (an odd number <= -1) and rightx (an odd number >= 1). Subsequent lines contain the height (a positive integer) of each divider from left to right. There will be no more than 1000 dividers in any test case. Input is terminated with a line containing two zeros.', 'For each case, output an integer on a single line, indicating how long it will take, in seconds, before water starts spilling over either the left or right divider. ', '-1 1\r\n3 5\r\n-3 3\r\n4 3 2 1\r\n-3 5\r\n1 2 2 1 1\r\n0 0\r\n', '6\r\n6\r\n8\r\n', '', 'Waterloo local 2002.09.21', '2015-09-01', 1000, 2000, 65536, 65536, 0, 0, 0, 0, '', 'poj', 1); args=[u'2364', 'Faucet Flow', "<img src=/upload/poj/2364/2364_1.jpg align=right>A faucet is pouring water into a long, thin aquarium with various vertical dividers (walls) in it. The aquarium is initially empty, and its bottom is perfectly level. How long will it take for water to spill over its left- or right-most divider? The faucet is above location x=0, and the dividers are located at x=-1, -3, -5, ..., leftx and 1, 3, 5, ..., rightx. The dividers are attached perpendicular to the floor and sides of the aquarium, and have various heights. The aquarium's length is greater than rightx-leftx, its walls are higher than the highest divider, and its width is 1 unit everywhere. Water pours from the faucet at a rate of 1 cubic unit per second. [You may assume that water is an ideal liquid: it always flows downhill and if it cannot flow downhill it spreads at an equal rate in all horizontal directions.] ", 'Each test case consists of two integers leftx (an odd number <= -1) and rightx (an odd number >= 1). Subsequent lines contain the height (a positive integer) of each divider from left to right. There will be no more than 1000 dividers in any test case. Input is terminated with a line containing two zeros.', 'For each case, output an integer on a single line, indicating how long it will take, in seconds, before water starts spilling over either the left or right divider. ', '-1 1\r\n3 5\r\n-3 3\r\n4 3 2 1\r\n-3 5\r\n1 2 2 1 1\r\n0 0\r\n', '6\r\n6\r\n8\r\n', '', 'Waterloo local 2002.09.21', u'2015-09-01', 1000, 2000, 65536, 65536, False, 0, 0, 0, '', u'poj', 1]
2015 Sep 01, Tue <03:21:00> log_main.py[line:15] INFO Download image <2364_1.jpg> over
2015 Sep 01, Tue <03:21:04> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:04> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:04> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 1; args=(1,)
2015 Sep 01, Tue <03:21:09> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:09> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:09> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 2; args=(2,)
2015 Sep 01, Tue <03:21:15> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:15> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:15> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 3; args=(3,)
2015 Sep 01, Tue <03:21:19> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:19> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:19> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 4; args=(4,)
2015 Sep 01, Tue <03:21:23> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:23> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:23> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 5; args=(5,)
2015 Sep 01, Tue <03:21:28> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:28> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:28> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 6; args=(6,)
2015 Sep 01, Tue <03:21:36> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:36> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:36> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 7; args=(7,)
2015 Sep 01, Tue <03:21:47> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:47> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:47> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 8; args=(8,)
2015 Sep 01, Tue <03:21:51> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:51> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:51> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 9; args=(9,)
2015 Sep 01, Tue <03:21:55> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:55> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:55> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 10; args=(10,)
2015 Sep 01, Tue <03:21:59> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:59> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:21:59> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 11; args=(11,)
2015 Sep 01, Tue <03:22:08> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:22:08> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:22:08> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 12; args=(12,)
2015 Sep 01, Tue <03:22:12> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:22:12> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:22:12> utils.py[line:89] DEBUG (0.001) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 13; args=(13,)
2015 Sep 01, Tue <03:22:16> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:22:16> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:22:16> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 14; args=(14,)
2015 Sep 01, Tue <03:22:19> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:22:19> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:22:19> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 15; args=(15,)
2015 Sep 01, Tue <03:22:23> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:22:23> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:22:23> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 16; args=(16,)
2015 Sep 01, Tue <03:22:28> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:22:28> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <03:22:28> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 17; args=(17,)
2015 Sep 01, Tue <03:22:28> defaulttags.py[line:66] WARNING /Library/Python/2.7/site-packages/django/template/defaulttags.py:66: UserWarning: A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext.
  "A {% csrf_token %} was used in a template, but the context "

2015 Sep 01, Tue <04:39:50> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:39:50> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:39:50> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 4; args=(4,)
2015 Sep 01, Tue <04:50:59> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:50:59> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:50:59> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1554' AND `problem_problem`.`oj` = 'hdu'); args=(u'1554', u'hdu')
2015 Sep 01, Tue <04:51:00> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=1554
2015 Sep 01, Tue <04:51:19> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:51:19> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:51:19> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1551' AND `problem_problem`.`oj` = 'hdu'); args=(u'1551', u'hdu')
2015 Sep 01, Tue <04:51:19> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=1551
2015 Sep 01, Tue <04:52:56> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:52:56> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:52:56> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '3232' AND `problem_problem`.`oj` = 'hdu'); args=(u'3232', u'hdu')
2015 Sep 01, Tue <04:52:57> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=3232
2015 Sep 01, Tue <04:53:16> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:53:16> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:53:16> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1010' AND `problem_problem`.`oj` = 'hdu'); args=(u'1010', u'hdu')
2015 Sep 01, Tue <04:53:16> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=1010
2015 Sep 01, Tue <04:54:06> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:54:06> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:54:06> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '3110' AND `problem_problem`.`oj` = 'hdu'); args=(u'3110', u'hdu')
2015 Sep 01, Tue <04:54:23> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:54:23> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:54:23> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1243' AND `problem_problem`.`oj` = 'hdu'); args=(u'1243', u'hdu')
2015 Sep 01, Tue <04:54:23> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=1243
2015 Sep 01, Tue <04:56:37> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:56:37> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:56:37> utils.py[line:89] DEBUG (0.001) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '4224' AND `problem_problem`.`oj` = 'hdu'); args=(u'4224', u'hdu')
2015 Sep 01, Tue <04:56:37> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=4224
2015 Sep 01, Tue <04:56:40> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:56:40> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:56:40> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '323' AND `problem_problem`.`oj` = 'hdu'); args=(u'323', u'hdu')
2015 Sep 01, Tue <04:56:40> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=323
2015 Sep 01, Tue <04:56:48> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:56:48> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:56:48> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '3231' AND `problem_problem`.`oj` = 'hdu'); args=(u'3231', u'hdu')
2015 Sep 01, Tue <04:56:48> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=3231
2015 Sep 01, Tue <04:57:39> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=3232
2015 Sep 01, Tue <04:57:47> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=3212
2015 Sep 01, Tue <04:57:51> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=3353
2015 Sep 01, Tue <04:57:52> log_main.py[line:15] INFO Download image <C277-1003-1.jpg> over
2015 Sep 01, Tue <04:57:52> log_main.py[line:15] INFO Download Image: C277-1003-1.jpg Over
2015 Sep 01, Tue <04:57:52> log_main.py[line:15] INFO Download image <shuyu.jpg> over
2015 Sep 01, Tue <04:57:52> log_main.py[line:15] INFO Download Image: shuyu.jpg Over
2015 Sep 01, Tue <04:57:52> log_main.py[line:15] INFO Download image <baohanyu.jpg> over
2015 Sep 01, Tue <04:57:52> log_main.py[line:15] INFO Download Image: baohanyu.jpg Over
2015 Sep 01, Tue <04:57:52> log_main.py[line:15] INFO Download image <C277-1003-2.jpg> over
2015 Sep 01, Tue <04:57:52> log_main.py[line:15] INFO Download Image: C277-1003-2.jpg Over
2015 Sep 01, Tue <04:58:40> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:58:40> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <04:58:40> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '3353' AND `problem_problem`.`oj` = 'hdu'); args=(u'3353', u'hdu')
2015 Sep 01, Tue <04:58:40> utils.py[line:89] DEBUG (0.001) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` LIMIT 21; args=()
2015 Sep 01, Tue <05:00:51> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <05:00:51> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <05:00:51> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '3353' AND `problem_problem`.`oj` = 'hdu'); args=(u'3353', u'hdu')
2015 Sep 01, Tue <05:00:51> utils.py[line:89] DEBUG (0.001) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` LIMIT 21; args=()
2015 Sep 01, Tue <05:01:05> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <05:01:05> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <05:01:05> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '3353' AND `problem_problem`.`oj` = 'hdu'); args=(u'3353', u'hdu')
2015 Sep 01, Tue <05:01:05> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=3353
2015 Sep 01, Tue <05:01:05> log_main.py[line:15] INFO Download image <C277-1003-1.jpg> over
2015 Sep 01, Tue <05:01:05> log_main.py[line:15] INFO Download Image: C277-1003-1.jpg Over
2015 Sep 01, Tue <05:01:05> log_main.py[line:15] INFO Download image <shuyu.jpg> over
2015 Sep 01, Tue <05:01:05> log_main.py[line:15] INFO Download Image: shuyu.jpg Over
2015 Sep 01, Tue <05:01:05> log_main.py[line:15] INFO Download image <baohanyu.jpg> over
2015 Sep 01, Tue <05:01:05> log_main.py[line:15] INFO Download Image: baohanyu.jpg Over
2015 Sep 01, Tue <05:01:05> log_main.py[line:15] INFO Download image <C277-1003-2.jpg> over
2015 Sep 01, Tue <05:01:05> log_main.py[line:15] INFO Download Image: C277-1003-2.jpg Over
2015 Sep 01, Tue <05:01:16> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <05:01:16> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <05:01:16> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '3411' AND `problem_problem`.`oj` = 'hdu'); args=(u'3411', u'hdu')
2015 Sep 01, Tue <05:01:16> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=3411
2015 Sep 01, Tue <05:01:16> log_main.py[line:15] INFO Download image <3411-1.png> over
2015 Sep 01, Tue <05:01:16> log_main.py[line:15] INFO Download Image: 3411-1.png Over
2015 Sep 01, Tue <06:38:52> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <06:38:52> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <06:38:52> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 4; args=(4,)
2015 Sep 01, Tue <06:39:01> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <06:39:01> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <06:39:01> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 7; args=(7,)
2015 Sep 01, Tue <17:13:09> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <17:13:09> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <17:13:09> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 5; args=(5,)
2015 Sep 01, Tue <17:13:38> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <17:13:38> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 01, Tue <17:13:38> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 5; args=(5,)
2015 Sep 02, Wed <15:15:00> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:15:00> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:15:00> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1654' AND `problem_problem`.`oj` = 'hdu'); args=(u'1654', u'hdu')
2015 Sep 02, Wed <15:15:02> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=1654
2015 Sep 02, Wed <15:15:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:15:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:15:27> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1654' AND `problem_problem`.`oj` = 'hdu'); args=(u'1654', u'hdu')
2015 Sep 02, Wed <15:15:27> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=1654
2015 Sep 02, Wed <15:16:32> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:16:32> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:16:32> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1654' AND `problem_problem`.`oj` = 'hdu'); args=(u'1654', u'hdu')
2015 Sep 02, Wed <15:16:32> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=1654
2015 Sep 02, Wed <15:16:35> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:16:35> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:16:35> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1612' AND `problem_problem`.`oj` = 'hdu'); args=(u'1612', u'hdu')
2015 Sep 02, Wed <15:16:35> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=1612
2015 Sep 02, Wed <15:18:12> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:18:12> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:18:12> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1612' AND `problem_problem`.`oj` = 'hdu'); args=(u'1612', u'hdu')
2015 Sep 02, Wed <15:18:12> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=1612
2015 Sep 02, Wed <15:18:12> log_main.py[line:15] INFO Download Problem: hdu-1612 Info Over
2015 Sep 02, Wed <15:18:12> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`oj` = 'hdu' AND `problem_problem`.`problem_id` = '1612'); args=(u'hdu', u'1612')
2015 Sep 02, Wed <15:18:12> utils.py[line:89] DEBUG (0.001) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('1612', 'The Blocks Problem', 'Many areas of Computer Science use simple, abstract domains for both analytical and empirical studies. For example, an early AI study of planning and robotics (STRIPS) used a block world in which a robot arm performed tasks involving the manipulation of blocks. <br>In this problem you will model a simple block world under certain rules and constraints. Rather than determine how to achieve a specified state, you will ``program\'\' a robotic arm to respond to a limited set of commands<br><br>The problem is to parse a series of commands that instruct a robot arm in how to manipulate blocks that lie on a flat table. Initially there are n blocks on the table (numbered from 0 to n-1) with block bi adjacent to block bi+1 for all 0≤i&lt;n-1 as shown in the diagram below<br><img src=/upload/hdu/1612/1612-1.gif><br>The valid commands for the robot arm that manipulates blocks are: <br><br>move a onto b <br>where a and b are block numbers, puts block a onto block b after returning any blocks that are stacked on top of blocks a and b to their initial positions. <br><br>move a over b <br>where a and b are block numbers, puts block a onto the top of the stack containing block b, after returning any blocks that are stacked on top of block a to their initial positions. <br><br>pile a onto b <br>where a and b are block numbers, moves the pile of blocks consisting of block a, and any blocks that are stacked above block a, onto block b. All blocks on top of block b are moved to their initial positions prior to the pile taking place. The blocks stacked above block a retain their order when moved. <br><br>pile a over b <br>where a and b are block numbers, puts the pile of blocks consisting of block a, and any blocks that are stacked above block a, onto the top of the stack containing block b. The blocks stacked above block a retain their original order when moved. <br><br>quit <br>terminates manipulations in the block world. <br><br>Any command in which a = b or in which a and b are in the same stack of blocks is an illegal command. All illegal commands should be ignored and should have no affect on the configuration of blocks. <br>', 'The input begins with an integer n on a line by itself representing the number of blocks in the block world. You may assume that 0 &lt; n &lt; 25. <br>The number of blocks is followed by a sequence of block commands, one command per line. Your program should process all commands until the quit command is encountered. <br><br>You may assume that all commands will be of the form specified above. There will be no syntactically incorrect commands. <br>', 'The output should consist of the final state of the blocks world. Each original block position numbered i (0≤i&lt;n-1 where n is the number of blocks) should appear followed immediately by a colon. If there is at least a block on it, the colon must be followed by one space, followed by a list of blocks that appear stacked in that position with each block number separated from other block numbers by a space. Don\'t put any trailing spaces on a line. <br><br>There should be one line of output for each block position (i.e., n lines of output where n is the integer on the first line of input). <br>', '10\r\nmove 9 onto 1\r\nmove 8 over 1\r\nmove 7 over 1\r\nmove 6 over 1\r\npile 8 over 6\r\npile 8 over 5\r\nmove 2 over 1\r\nmove 4 over 9\r\nquit', ' 0: 0\r\n 1: 1 9 2 4\r\n 2:\r\n 3: 3\r\n 4:\r\n 5: 5 8 7 6\r\n 6:\r\n 7:\r\n 8:\r\n 9:', '', 'Miguel Revilla', '2015-09-02', 0, 2000, 32768, 65536, 0, 0, 0, 0, '', 'hdu', 1); args=[u'1612', 'The Blocks Problem', "Many areas of Computer Science use simple, abstract domains for both analytical and empirical studies. For example, an early AI study of planning and robotics (STRIPS) used a block world in which a robot arm performed tasks involving the manipulation of blocks. <br>In this problem you will model a simple block world under certain rules and constraints. Rather than determine how to achieve a specified state, you will ``program'' a robotic arm to respond to a limited set of commands<br><br>The problem is to parse a series of commands that instruct a robot arm in how to manipulate blocks that lie on a flat table. Initially there are n blocks on the table (numbered from 0 to n-1) with block bi adjacent to block bi+1 for all 0\xe2\x89\xa4i&lt;n-1 as shown in the diagram below<br><img src=/upload/hdu/1612/1612-1.gif><br>The valid commands for the robot arm that manipulates blocks are: <br><br>move a onto b <br>where a and b are block numbers, puts block a onto block b after returning any blocks that are stacked on top of blocks a and b to their initial positions. <br><br>move a over b <br>where a and b are block numbers, puts block a onto the top of the stack containing block b, after returning any blocks that are stacked on top of block a to their initial positions. <br><br>pile a onto b <br>where a and b are block numbers, moves the pile of blocks consisting of block a, and any blocks that are stacked above block a, onto block b. All blocks on top of block b are moved to their initial positions prior to the pile taking place. The blocks stacked above block a retain their order when moved. <br><br>pile a over b <br>where a and b are block numbers, puts the pile of blocks consisting of block a, and any blocks that are stacked above block a, onto the top of the stack containing block b. The blocks stacked above block a retain their original order when moved. <br><br>quit <br>terminates manipulations in the block world. <br><br>Any command in which a = b or in which a and b are in the same stack of blocks is an illegal command. All illegal commands should be ignored and should have no affect on the configuration of blocks. <br>", 'The input begins with an integer n on a line by itself representing the number of blocks in the block world. You may assume that 0 &lt; n &lt; 25. <br>The number of blocks is followed by a sequence of block commands, one command per line. Your program should process all commands until the quit command is encountered. <br><br>You may assume that all commands will be of the form specified above. There will be no syntactically incorrect commands. <br>', "The output should consist of the final state of the blocks world. Each original block position numbered i (0\xe2\x89\xa4i&lt;n-1 where n is the number of blocks) should appear followed immediately by a colon. If there is at least a block on it, the colon must be followed by one space, followed by a list of blocks that appear stacked in that position with each block number separated from other block numbers by a space. Don't put any trailing spaces on a line. <br><br>There should be one line of output for each block position (i.e., n lines of output where n is the integer on the first line of input). <br>", '10\r\nmove 9 onto 1\r\nmove 8 over 1\r\nmove 7 over 1\r\nmove 6 over 1\r\npile 8 over 6\r\npile 8 over 5\r\nmove 2 over 1\r\nmove 4 over 9\r\nquit', ' 0: 0\r\n 1: 1 9 2 4\r\n 2:\r\n 3: 3\r\n 4:\r\n 5: 5 8 7 6\r\n 6:\r\n 7:\r\n 8:\r\n 9:', '', 'Miguel Revilla', u'2015-09-02', 0, 2000, 32768, 65536, False, 0, 0, 0, '', u'hdu', 1]
2015 Sep 02, Wed <15:18:12> log_main.py[line:15] INFO Problem: hdu-1612Saved
2015 Sep 02, Wed <15:18:12> log_main.py[line:15] INFO Download image <1612-1.gif> over
2015 Sep 02, Wed <15:18:12> log_main.py[line:15] INFO Download Image: 1612-1.gif Over
2015 Sep 02, Wed <15:22:14> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:22:14> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:22:14> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`problem_id` = '1612' AND `problem_problem`.`oj` = 'hdu'); args=(u'1612', u'hdu')
2015 Sep 02, Wed <15:23:04> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=1612
2015 Sep 02, Wed <15:23:04> log_main.py[line:15] INFO Download Problem: hdu-1612 Info Over
2015 Sep 02, Wed <15:23:04> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:23:04> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:23:04> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`oj` = 'hdu' AND `problem_problem`.`problem_id` = '1612'); args=(u'hdu', u'1612')
2015 Sep 02, Wed <15:23:04> log_main.py[line:15] INFO Problem: hdu-1612 Updated
2015 Sep 02, Wed <15:23:04> log_main.py[line:15] INFO Download image <1612-1.gif> over
2015 Sep 02, Wed <15:23:04> log_main.py[line:15] INFO Download Image: 1612-1.gif Over
2015 Sep 02, Wed <15:24:15> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=1612
2015 Sep 02, Wed <15:24:15> log_main.py[line:15] INFO Download Problem: hdu-1612 Info Over
2015 Sep 02, Wed <15:24:15> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:24:15> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:24:15> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`oj` = 'hdu' AND `problem_problem`.`problem_id` = '1612'); args=(u'hdu', u'1612')
2015 Sep 02, Wed <15:24:15> log_main.py[line:15] INFO Problem: hdu-1612 Updated
2015 Sep 02, Wed <15:24:15> log_main.py[line:15] INFO Download image <1612-1.gif> over
2015 Sep 02, Wed <15:24:27> log_main.py[line:15] INFO get_html:http://acm.hdu.edu.cn/showproblem.php?pid=1463
2015 Sep 02, Wed <15:24:27> log_main.py[line:15] INFO Download Problem: hdu-1463 Info Over
2015 Sep 02, Wed <15:24:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:24:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <15:24:27> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE (`problem_problem`.`oj` = 'hdu' AND `problem_problem`.`problem_id` = '1463'); args=(u'hdu', u'1463')
2015 Sep 02, Wed <15:24:27> utils.py[line:89] DEBUG (0.001) INSERT INTO `problem_problem` (`problem_id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`, `hint`, `source`, `date`, `time_limit_c`, `time_limit_java`, `memory_limit_c`, `memory_limit_java`, `defunct`, `accepted`, `submit`, `solved`, `type`, `oj`, `judge_type`) VALUES ('1463', 'Anniversaries', 'As far as our perceptions are concerned, a year runs from the midnight beginning the first of January to the midnight ending the 31st of December. Thus we can say that a year consists of:<br>12 months (of differing lengths) <br>52 (and a bit) weeks <br>365 days <br>8,760 hours <br>525,600 minutes <br>31,536,000 seconds. <br>Most of these numbers need to be adjusted in leap years.<br><br>A k\'th anniversary of a date is usually defined as the same date (month and day) k years later, thus the 10th anniversary of 17th May 1983 is 17th May 1993. However we can also define other types of `versaries\' - the 1 week-versary of 28th February 1984 is 6th March 1984.<br><br>If we define a convention of naming dates (and times if necessary) by specifying successively smaller periods separated by colons (that is as yyyy:mm:dd:hh:mm:ss) we can label the units using the same convention, that is y for years, d for days, w for weeks, h for hours, m for minutes and s for seconds (we cannot use months, they are too variable). We can then summarise the above examples as:<br>1983:5:17 + 10y -&gt; 1993:5:17<br>1984:2:28 + 1w -&gt; 1984:3:6 <br>Note that the specification of an event has to be as least as precise (that is employ units at least as small) as the specification of the desired versary.<br><br>Write a program that will read in details of events and desired versaries and calculate the required date (and time if necessary). Bear in mind that a year is a leap year if it is divisible by 4 unless it is divisible by 100 as well, in which case it is only a leap year if it is divisible by 400; thus 1984 and 2000 are leap years, but 1900 is not.<br><br>', 'Input will consist of a series of lines, each line a specification of an event and a desired versary. The input will follow the format shown below, except that where one space is shown there may be more than one space. The event will be specified at least to the same precision as the desired versary. All events will start in this century, and no versary will be more than 100 years (or equivalent). Note that midnight starts a day rather than terminates it and thus is written as 0:0:0 and not as 24:0:0. The file will be terminated by a line consisting of a single 0.<br><br>', 'Output will consist of a series of lines, one for each line of the input. Each line will consist of the specification of the desired versary, to the same precision as given in the input, in the format shown below.<br><br>', '1983:5:17    10 y\r\n1984:2:28    1   w\r\n1993:7:25:13:23 5 h\r\n0', '1983:5:17 + 10y -> 1993:5:17\r\n1984:2:28 + 1w -> 1984:3:6\r\n1993:7:25:13:23 + 5h -> 1993:7:25:18:23', '', '', '2015-09-02', 0, 2000, 32768, 65536, 0, 0, 0, 0, '', 'hdu', 1); args=[u'1463', 'Anniversaries', "As far as our perceptions are concerned, a year runs from the midnight beginning the first of January to the midnight ending the 31st of December. Thus we can say that a year consists of:<br>12 months (of differing lengths) <br>52 (and a bit) weeks <br>365 days <br>8,760 hours <br>525,600 minutes <br>31,536,000 seconds. <br>Most of these numbers need to be adjusted in leap years.<br><br>A k'th anniversary of a date is usually defined as the same date (month and day) k years later, thus the 10th anniversary of 17th May 1983 is 17th May 1993. However we can also define other types of `versaries' - the 1 week-versary of 28th February 1984 is 6th March 1984.<br><br>If we define a convention of naming dates (and times if necessary) by specifying successively smaller periods separated by colons (that is as yyyy:mm:dd:hh:mm:ss) we can label the units using the same convention, that is y for years, d for days, w for weeks, h for hours, m for minutes and s for seconds (we cannot use months, they are too variable). We can then summarise the above examples as:<br>1983:5:17 + 10y -&gt; 1993:5:17<br>1984:2:28 + 1w -&gt; 1984:3:6 <br>Note that the specification of an event has to be as least as precise (that is employ units at least as small) as the specification of the desired versary.<br><br>Write a program that will read in details of events and desired versaries and calculate the required date (and time if necessary). Bear in mind that a year is a leap year if it is divisible by 4 unless it is divisible by 100 as well, in which case it is only a leap year if it is divisible by 400; thus 1984 and 2000 are leap years, but 1900 is not.<br><br>", 'Input will consist of a series of lines, each line a specification of an event and a desired versary. The input will follow the format shown below, except that where one space is shown there may be more than one space. The event will be specified at least to the same precision as the desired versary. All events will start in this century, and no versary will be more than 100 years (or equivalent). Note that midnight starts a day rather than terminates it and thus is written as 0:0:0 and not as 24:0:0. The file will be terminated by a line consisting of a single 0.<br><br>', 'Output will consist of a series of lines, one for each line of the input. Each line will consist of the specification of the desired versary, to the same precision as given in the input, in the format shown below.<br><br>', '1983:5:17    10 y\r\n1984:2:28    1   w\r\n1993:7:25:13:23 5 h\r\n0', '1983:5:17 + 10y -> 1993:5:17\r\n1984:2:28 + 1w -> 1984:3:6\r\n1993:7:25:13:23 + 5h -> 1993:7:25:18:23', '', '', u'2015-09-02', 0, 2000, 32768, 65536, False, 0, 0, 0, '', u'hdu', 1]
2015 Sep 02, Wed <15:24:27> log_main.py[line:15] INFO Problem: hdu-1463 Saved
2015 Sep 02, Wed <16:14:16> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:14:16> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:14:16> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`username` = 'neau'; args=(u'neau',)
2015 Sep 02, Wed <16:15:03> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:15:03> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:15:03> utils.py[line:89] DEBUG (0.000) SELECT `problem_problem`.`id`, `problem_problem`.`problem_id`, `problem_problem`.`title`, `problem_problem`.`description`, `problem_problem`.`input`, `problem_problem`.`output`, `problem_problem`.`sample_input`, `problem_problem`.`sample_output`, `problem_problem`.`hint`, `problem_problem`.`source`, `problem_problem`.`date`, `problem_problem`.`time_limit_c`, `problem_problem`.`time_limit_java`, `problem_problem`.`memory_limit_c`, `problem_problem`.`memory_limit_java`, `problem_problem`.`defunct`, `problem_problem`.`accepted`, `problem_problem`.`submit`, `problem_problem`.`solved`, `problem_problem`.`type`, `problem_problem`.`oj`, `problem_problem`.`judge_type` FROM `problem_problem` WHERE `problem_problem`.`id` = 4; args=(4,)
2015 Sep 02, Wed <16:30:38> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:30:38> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:30:38> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`username` = 'neau'; args=(u'neau',)
2015 Sep 02, Wed <16:30:38> utils.py[line:89] DEBUG (0.000) INSERT INTO `auth_user` (`password`, `last_login`, `is_superuser`, `username`, `first_name`, `last_name`, `email`, `is_staff`, `is_active`, `date_joined`) VALUES ('pbkdf2_sha256$20000$JcJbkcLdkwJD$Ezy1uEJyBgCeZgw7aag/wjxtOXpBC0VH+Q8G7YrzJXA=', NULL, 0, 'neau', '', '', 'code_cola@163.com', 0, 1, '2015-09-02 16:30:38.090484'); args=[u'pbkdf2_sha256$20000$JcJbkcLdkwJD$Ezy1uEJyBgCeZgw7aag/wjxtOXpBC0VH+Q8G7YrzJXA=', None, False, u'neau', u'', u'', u'code_cola@163.com', False, True, u'2015-09-02 16:30:38.090484']
2015 Sep 02, Wed <16:30:38> utils.py[line:89] DEBUG (0.000) INSERT INTO `users_info` (`user_id`, `nickname`, `submit`, `solve`, `submit_in`, `solve_in`, `submit_out`, `solve_out`, `school`, `grade`, `team`) VALUES (1, 'NEAU', 0, 0, 0, 0, 0, 0, 'neau', 2013, 0); args=[1, u'NEAU', 0, 0, 0, 0, 0, 0, u'neau', 2013, False]
2015 Sep 02, Wed <16:31:03> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:31:03> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:31:03> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`username` = 'neau'; args=(u'neau',)
2015 Sep 02, Wed <16:31:03> utils.py[line:89] DEBUG (0.000) SELECT (1) AS `a` FROM `django_session` WHERE `django_session`.`session_key` = 'kqkgl4z36syjg5hz6hpwc5jodjs4cql3' LIMIT 1; args=(u'kqkgl4z36syjg5hz6hpwc5jodjs4cql3',)
2015 Sep 02, Wed <16:31:03> utils.py[line:89] DEBUG (0.001) INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES ('kqkgl4z36syjg5hz6hpwc5jodjs4cql3', 'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', '2015-09-16 16:31:03.772836'); args=(u'kqkgl4z36syjg5hz6hpwc5jodjs4cql3', u'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', u'2015-09-16 16:31:03.772836')
2015 Sep 02, Wed <16:31:03> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE `django_session`.`session_key` = 'kqkgl4z36syjg5hz6hpwc5jodjs4cql3'; args=(u'kqkgl4z36syjg5hz6hpwc5jodjs4cql3',)
2015 Sep 02, Wed <16:31:03> utils.py[line:89] DEBUG (0.000) DELETE FROM `django_session` WHERE `django_session`.`session_key` IN ('kqkgl4z36syjg5hz6hpwc5jodjs4cql3'); args=(u'kqkgl4z36syjg5hz6hpwc5jodjs4cql3',)
2015 Sep 02, Wed <16:31:03> utils.py[line:89] DEBUG (0.000) UPDATE `auth_user` SET `last_login` = '2015-09-02 16:31:03.776830' WHERE `auth_user`.`id` = 1; args=(u'2015-09-02 16:31:03.776830', 1)
2015 Sep 02, Wed <16:31:03> utils.py[line:89] DEBUG (0.000) UPDATE `django_session` SET `session_data` = 'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', `expire_date` = '2015-09-16 16:31:03.778364' WHERE `django_session`.`session_key` = 'kqkgl4z36syjg5hz6hpwc5jodjs4cql3'; args=(u'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', u'2015-09-16 16:31:03.778364', u'kqkgl4z36syjg5hz6hpwc5jodjs4cql3')
2015 Sep 02, Wed <16:31:03> utils.py[line:89] DEBUG (0.000) INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES ('kqkgl4z36syjg5hz6hpwc5jodjs4cql3', 'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2015-09-16 16:31:03.778364'); args=(u'kqkgl4z36syjg5hz6hpwc5jodjs4cql3', u'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', u'2015-09-16 16:31:03.778364')
2015 Sep 02, Wed <16:31:03> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:31:03> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:31:03> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'kqkgl4z36syjg5hz6hpwc5jodjs4cql3' AND `django_session`.`expire_date` > '2015-09-02 16:31:03.793560'); args=('kqkgl4z36syjg5hz6hpwc5jodjs4cql3', u'2015-09-02 16:31:03.793560')
2015 Sep 02, Wed <16:31:03> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 02, Wed <16:31:03> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 02, Wed <16:32:08> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 02, Wed <16:32:11> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:32:11> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:32:11> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'kqkgl4z36syjg5hz6hpwc5jodjs4cql3' AND `django_session`.`expire_date` > '2015-09-02 16:32:11.625026'); args=('kqkgl4z36syjg5hz6hpwc5jodjs4cql3', u'2015-09-02 16:32:11.625026')
2015 Sep 02, Wed <16:32:11> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 02, Wed <16:32:11> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE `django_session`.`session_key` = 'kqkgl4z36syjg5hz6hpwc5jodjs4cql3'; args=('kqkgl4z36syjg5hz6hpwc5jodjs4cql3',)
2015 Sep 02, Wed <16:32:11> utils.py[line:89] DEBUG (0.000) DELETE FROM `django_session` WHERE `django_session`.`session_key` IN ('kqkgl4z36syjg5hz6hpwc5jodjs4cql3'); args=(u'kqkgl4z36syjg5hz6hpwc5jodjs4cql3',)
2015 Sep 02, Wed <16:32:23> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:32:23> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:32:23> utils.py[line:89] DEBUG (0.000) SELECT (1) AS `a` FROM `django_session` WHERE `django_session`.`session_key` = '2tbcntvsx2rm4p6qsqvigw3ixqdzuvxl' LIMIT 1; args=(u'2tbcntvsx2rm4p6qsqvigw3ixqdzuvxl',)
2015 Sep 02, Wed <16:32:23> utils.py[line:89] DEBUG (0.000) INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES ('2tbcntvsx2rm4p6qsqvigw3ixqdzuvxl', 'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', '2015-09-16 16:32:23.783686'); args=(u'2tbcntvsx2rm4p6qsqvigw3ixqdzuvxl', u'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', u'2015-09-16 16:32:23.783686')
2015 Sep 02, Wed <16:32:23> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:32:23> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:32:23> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = '2tbcntvsx2rm4p6qsqvigw3ixqdzuvxl' AND `django_session`.`expire_date` > '2015-09-02 16:32:23.813257'); args=('2tbcntvsx2rm4p6qsqvigw3ixqdzuvxl', u'2015-09-02 16:32:23.813257')
2015 Sep 02, Wed <16:36:28> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:36:28> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:36:28> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = '2tbcntvsx2rm4p6qsqvigw3ixqdzuvxl' AND `django_session`.`expire_date` > '2015-09-02 16:36:28.820090'); args=('2tbcntvsx2rm4p6qsqvigw3ixqdzuvxl', u'2015-09-02 16:36:28.820090')
2015 Sep 02, Wed <16:36:41> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:36:41> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:36:41> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`username` = 'neau'; args=(u'neau',)
2015 Sep 02, Wed <16:36:41> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = '2tbcntvsx2rm4p6qsqvigw3ixqdzuvxl' AND `django_session`.`expire_date` > '2015-09-02 16:36:41.719231'); args=('2tbcntvsx2rm4p6qsqvigw3ixqdzuvxl', u'2015-09-02 16:36:41.719231')
2015 Sep 02, Wed <16:36:41> utils.py[line:89] DEBUG (0.000) SELECT (1) AS `a` FROM `django_session` WHERE `django_session`.`session_key` = 'v6jezmnfecc7468jwdkiq26i7f1n9ksx' LIMIT 1; args=(u'v6jezmnfecc7468jwdkiq26i7f1n9ksx',)
2015 Sep 02, Wed <16:36:41> utils.py[line:89] DEBUG (0.001) INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES ('v6jezmnfecc7468jwdkiq26i7f1n9ksx', 'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', '2015-09-16 16:36:41.722542'); args=(u'v6jezmnfecc7468jwdkiq26i7f1n9ksx', u'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', u'2015-09-16 16:36:41.722542')
2015 Sep 02, Wed <16:36:41> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE `django_session`.`session_key` = '2tbcntvsx2rm4p6qsqvigw3ixqdzuvxl'; args=('2tbcntvsx2rm4p6qsqvigw3ixqdzuvxl',)
2015 Sep 02, Wed <16:36:41> utils.py[line:89] DEBUG (0.000) DELETE FROM `django_session` WHERE `django_session`.`session_key` IN ('2tbcntvsx2rm4p6qsqvigw3ixqdzuvxl'); args=(u'2tbcntvsx2rm4p6qsqvigw3ixqdzuvxl',)
2015 Sep 02, Wed <16:36:41> utils.py[line:89] DEBUG (0.000) UPDATE `auth_user` SET `last_login` = '2015-09-02 16:36:41.727113' WHERE `auth_user`.`id` = 1; args=(u'2015-09-02 16:36:41.727113', 1)
2015 Sep 02, Wed <16:36:41> utils.py[line:89] DEBUG (0.000) UPDATE `django_session` SET `session_data` = 'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', `expire_date` = '2015-09-16 16:36:41.728712' WHERE `django_session`.`session_key` = 'v6jezmnfecc7468jwdkiq26i7f1n9ksx'; args=(u'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', u'2015-09-16 16:36:41.728712', u'v6jezmnfecc7468jwdkiq26i7f1n9ksx')
2015 Sep 02, Wed <16:36:41> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:36:41> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:36:41> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'v6jezmnfecc7468jwdkiq26i7f1n9ksx' AND `django_session`.`expire_date` > '2015-09-02 16:36:41.738495'); args=('v6jezmnfecc7468jwdkiq26i7f1n9ksx', u'2015-09-02 16:36:41.738495')
2015 Sep 02, Wed <16:36:41> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 02, Wed <16:36:41> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 02, Wed <16:36:44> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:36:44> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 02, Wed <16:36:44> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'v6jezmnfecc7468jwdkiq26i7f1n9ksx' AND `django_session`.`expire_date` > '2015-09-02 16:36:44.700726'); args=('v6jezmnfecc7468jwdkiq26i7f1n9ksx', u'2015-09-02 16:36:44.700726')
2015 Sep 02, Wed <16:36:44> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 02, Wed <16:36:44> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE `django_session`.`session_key` = 'v6jezmnfecc7468jwdkiq26i7f1n9ksx'; args=('v6jezmnfecc7468jwdkiq26i7f1n9ksx',)
2015 Sep 02, Wed <16:36:44> utils.py[line:89] DEBUG (0.000) DELETE FROM `django_session` WHERE `django_session`.`session_key` IN ('v6jezmnfecc7468jwdkiq26i7f1n9ksx'); args=(u'v6jezmnfecc7468jwdkiq26i7f1n9ksx',)
2015 Sep 03, Thu <13:20:28> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 03, Thu <13:20:28> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 03, Thu <13:20:28> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`username` = 'neau'; args=(u'neau',)
2015 Sep 03, Thu <13:20:28> utils.py[line:89] DEBUG (0.000) SELECT (1) AS `a` FROM `django_session` WHERE `django_session`.`session_key` = 'l0xgvot3gbccdztqmw09z28qtv8iyzlk' LIMIT 1; args=(u'l0xgvot3gbccdztqmw09z28qtv8iyzlk',)
2015 Sep 03, Thu <13:20:28> utils.py[line:89] DEBUG (0.000) INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES ('l0xgvot3gbccdztqmw09z28qtv8iyzlk', 'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', '2015-09-17 13:20:28.568424'); args=(u'l0xgvot3gbccdztqmw09z28qtv8iyzlk', u'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', u'2015-09-17 13:20:28.568424')
2015 Sep 03, Thu <13:20:28> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE `django_session`.`session_key` = 'l0xgvot3gbccdztqmw09z28qtv8iyzlk'; args=(u'l0xgvot3gbccdztqmw09z28qtv8iyzlk',)
2015 Sep 03, Thu <13:20:28> utils.py[line:89] DEBUG (0.000) DELETE FROM `django_session` WHERE `django_session`.`session_key` IN ('l0xgvot3gbccdztqmw09z28qtv8iyzlk'); args=(u'l0xgvot3gbccdztqmw09z28qtv8iyzlk',)
2015 Sep 03, Thu <13:20:28> utils.py[line:89] DEBUG (0.000) UPDATE `auth_user` SET `last_login` = '2015-09-03 13:20:28.572461' WHERE `auth_user`.`id` = 1; args=(u'2015-09-03 13:20:28.572461', 1)
2015 Sep 03, Thu <13:20:28> utils.py[line:89] DEBUG (0.000) UPDATE `django_session` SET `session_data` = 'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', `expire_date` = '2015-09-17 13:20:28.573897' WHERE `django_session`.`session_key` = 'l0xgvot3gbccdztqmw09z28qtv8iyzlk'; args=(u'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', u'2015-09-17 13:20:28.573897', u'l0xgvot3gbccdztqmw09z28qtv8iyzlk')
2015 Sep 03, Thu <13:20:28> utils.py[line:89] DEBUG (0.000) INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES ('l0xgvot3gbccdztqmw09z28qtv8iyzlk', 'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2015-09-17 13:20:28.573897'); args=(u'l0xgvot3gbccdztqmw09z28qtv8iyzlk', u'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', u'2015-09-17 13:20:28.573897')
2015 Sep 03, Thu <13:20:28> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 03, Thu <13:20:28> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 03, Thu <13:20:28> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'l0xgvot3gbccdztqmw09z28qtv8iyzlk' AND `django_session`.`expire_date` > '2015-09-03 13:20:28.589301'); args=('l0xgvot3gbccdztqmw09z28qtv8iyzlk', u'2015-09-03 13:20:28.589301')
2015 Sep 03, Thu <13:20:28> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 03, Thu <13:20:28> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 03, Thu <13:20:31> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 03, Thu <13:20:31> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 03, Thu <13:20:31> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'l0xgvot3gbccdztqmw09z28qtv8iyzlk' AND `django_session`.`expire_date` > '2015-09-03 13:20:31.114968'); args=('l0xgvot3gbccdztqmw09z28qtv8iyzlk', u'2015-09-03 13:20:31.114968')
2015 Sep 03, Thu <13:20:31> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 03, Thu <13:20:31> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE `django_session`.`session_key` = 'l0xgvot3gbccdztqmw09z28qtv8iyzlk'; args=('l0xgvot3gbccdztqmw09z28qtv8iyzlk',)
2015 Sep 03, Thu <13:20:31> utils.py[line:89] DEBUG (0.000) DELETE FROM `django_session` WHERE `django_session`.`session_key` IN ('l0xgvot3gbccdztqmw09z28qtv8iyzlk'); args=(u'l0xgvot3gbccdztqmw09z28qtv8iyzlk',)
2015 Sep 04, Fri <10:12:46> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:12:46> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:12:46> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`username` = 'neau'; args=(u'neau',)
2015 Sep 04, Fri <10:12:46> utils.py[line:89] DEBUG (0.000) SELECT (1) AS `a` FROM `django_session` WHERE `django_session`.`session_key` = 'ytz42lwa5z46gke7mouv20brodlk7y7q' LIMIT 1; args=(u'ytz42lwa5z46gke7mouv20brodlk7y7q',)
2015 Sep 04, Fri <10:12:46> utils.py[line:89] DEBUG (0.000) INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES ('ytz42lwa5z46gke7mouv20brodlk7y7q', 'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', '2015-09-18 10:12:46.794311'); args=(u'ytz42lwa5z46gke7mouv20brodlk7y7q', u'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', u'2015-09-18 10:12:46.794311')
2015 Sep 04, Fri <10:12:46> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE `django_session`.`session_key` = 'ytz42lwa5z46gke7mouv20brodlk7y7q'; args=(u'ytz42lwa5z46gke7mouv20brodlk7y7q',)
2015 Sep 04, Fri <10:12:46> utils.py[line:89] DEBUG (0.000) DELETE FROM `django_session` WHERE `django_session`.`session_key` IN ('ytz42lwa5z46gke7mouv20brodlk7y7q'); args=(u'ytz42lwa5z46gke7mouv20brodlk7y7q',)
2015 Sep 04, Fri <10:12:46> utils.py[line:89] DEBUG (0.000) UPDATE `auth_user` SET `last_login` = '2015-09-04 10:12:46.798045' WHERE `auth_user`.`id` = 1; args=(u'2015-09-04 10:12:46.798045', 1)
2015 Sep 04, Fri <10:12:46> utils.py[line:89] DEBUG (0.000) UPDATE `django_session` SET `session_data` = 'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', `expire_date` = '2015-09-18 10:12:46.799658' WHERE `django_session`.`session_key` = 'ytz42lwa5z46gke7mouv20brodlk7y7q'; args=(u'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', u'2015-09-18 10:12:46.799658', u'ytz42lwa5z46gke7mouv20brodlk7y7q')
2015 Sep 04, Fri <10:12:46> utils.py[line:89] DEBUG (0.000) INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES ('ytz42lwa5z46gke7mouv20brodlk7y7q', 'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2015-09-18 10:12:46.799658'); args=(u'ytz42lwa5z46gke7mouv20brodlk7y7q', u'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', u'2015-09-18 10:12:46.799658')
2015 Sep 04, Fri <10:12:46> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:12:46> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:12:46> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'ytz42lwa5z46gke7mouv20brodlk7y7q' AND `django_session`.`expire_date` > '2015-09-04 10:12:46.806762'); args=('ytz42lwa5z46gke7mouv20brodlk7y7q', u'2015-09-04 10:12:46.806762')
2015 Sep 04, Fri <10:12:46> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 04, Fri <10:12:46> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 04, Fri <10:13:08> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:13:08> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:13:08> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'ytz42lwa5z46gke7mouv20brodlk7y7q' AND `django_session`.`expire_date` > '2015-09-04 10:13:08.242260'); args=('ytz42lwa5z46gke7mouv20brodlk7y7q', u'2015-09-04 10:13:08.242260')
2015 Sep 04, Fri <10:13:08> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 04, Fri <10:13:08> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 04, Fri <10:13:11> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:13:11> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:13:11> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'ytz42lwa5z46gke7mouv20brodlk7y7q' AND `django_session`.`expire_date` > '2015-09-04 10:13:11.655063'); args=('ytz42lwa5z46gke7mouv20brodlk7y7q', u'2015-09-04 10:13:11.655063')
2015 Sep 04, Fri <10:13:11> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 04, Fri <10:13:11> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE `django_session`.`session_key` = 'ytz42lwa5z46gke7mouv20brodlk7y7q'; args=('ytz42lwa5z46gke7mouv20brodlk7y7q',)
2015 Sep 04, Fri <10:13:11> utils.py[line:89] DEBUG (0.000) DELETE FROM `django_session` WHERE `django_session`.`session_key` IN ('ytz42lwa5z46gke7mouv20brodlk7y7q'); args=(u'ytz42lwa5z46gke7mouv20brodlk7y7q',)
2015 Sep 04, Fri <10:19:14> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:14> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:14> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`username` = 'neau'; args=(u'neau',)
2015 Sep 04, Fri <10:19:14> utils.py[line:89] DEBUG (0.000) SELECT (1) AS `a` FROM `django_session` WHERE `django_session`.`session_key` = 'sy4dhfmah9hate5dofroq6as9c2c9uj0' LIMIT 1; args=(u'sy4dhfmah9hate5dofroq6as9c2c9uj0',)
2015 Sep 04, Fri <10:19:14> utils.py[line:89] DEBUG (0.000) INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES ('sy4dhfmah9hate5dofroq6as9c2c9uj0', 'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', '2015-09-18 10:19:14.176840'); args=(u'sy4dhfmah9hate5dofroq6as9c2c9uj0', u'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', u'2015-09-18 10:19:14.176840')
2015 Sep 04, Fri <10:19:14> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE `django_session`.`session_key` = 'sy4dhfmah9hate5dofroq6as9c2c9uj0'; args=(u'sy4dhfmah9hate5dofroq6as9c2c9uj0',)
2015 Sep 04, Fri <10:19:14> utils.py[line:89] DEBUG (0.000) DELETE FROM `django_session` WHERE `django_session`.`session_key` IN ('sy4dhfmah9hate5dofroq6as9c2c9uj0'); args=(u'sy4dhfmah9hate5dofroq6as9c2c9uj0',)
2015 Sep 04, Fri <10:19:14> utils.py[line:89] DEBUG (0.000) UPDATE `auth_user` SET `last_login` = '2015-09-04 10:19:14.180123' WHERE `auth_user`.`id` = 1; args=(u'2015-09-04 10:19:14.180123', 1)
2015 Sep 04, Fri <10:19:14> utils.py[line:89] DEBUG (0.000) UPDATE `django_session` SET `session_data` = 'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', `expire_date` = '2015-09-18 10:19:14.181833' WHERE `django_session`.`session_key` = 'sy4dhfmah9hate5dofroq6as9c2c9uj0'; args=(u'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', u'2015-09-18 10:19:14.181833', u'sy4dhfmah9hate5dofroq6as9c2c9uj0')
2015 Sep 04, Fri <10:19:14> utils.py[line:89] DEBUG (0.000) INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES ('sy4dhfmah9hate5dofroq6as9c2c9uj0', 'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2015-09-18 10:19:14.181833'); args=(u'sy4dhfmah9hate5dofroq6as9c2c9uj0', u'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', u'2015-09-18 10:19:14.181833')
2015 Sep 04, Fri <10:19:14> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:14> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:14> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'sy4dhfmah9hate5dofroq6as9c2c9uj0' AND `django_session`.`expire_date` > '2015-09-04 10:19:14.196785'); args=('sy4dhfmah9hate5dofroq6as9c2c9uj0', u'2015-09-04 10:19:14.196785')
2015 Sep 04, Fri <10:19:14> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 04, Fri <10:19:14> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 04, Fri <10:19:20> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:20> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:20> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`username` = 'neau'; args=(u'neau',)
2015 Sep 04, Fri <10:19:20> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'sy4dhfmah9hate5dofroq6as9c2c9uj0' AND `django_session`.`expire_date` > '2015-09-04 10:19:20.811982'); args=('sy4dhfmah9hate5dofroq6as9c2c9uj0', u'2015-09-04 10:19:20.811982')
2015 Sep 04, Fri <10:19:20> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 04, Fri <10:19:20> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 04, Fri <10:19:20> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 04, Fri <10:19:22> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:22> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:22> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'sy4dhfmah9hate5dofroq6as9c2c9uj0' AND `django_session`.`expire_date` > '2015-09-04 10:19:22.091165'); args=('sy4dhfmah9hate5dofroq6as9c2c9uj0', u'2015-09-04 10:19:22.091165')
2015 Sep 04, Fri <10:19:22> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 04, Fri <10:19:22> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE `django_session`.`session_key` = 'sy4dhfmah9hate5dofroq6as9c2c9uj0'; args=('sy4dhfmah9hate5dofroq6as9c2c9uj0',)
2015 Sep 04, Fri <10:19:22> utils.py[line:89] DEBUG (0.000) DELETE FROM `django_session` WHERE `django_session`.`session_key` IN ('sy4dhfmah9hate5dofroq6as9c2c9uj0'); args=(u'sy4dhfmah9hate5dofroq6as9c2c9uj0',)
2015 Sep 04, Fri <10:19:25> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:25> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:25> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`username` = 'neau'; args=(u'neau',)
2015 Sep 04, Fri <10:19:26> utils.py[line:89] DEBUG (0.000) SELECT (1) AS `a` FROM `django_session` WHERE `django_session`.`session_key` = 'qnw2nbkbunbweuf4ur9hrk6n6e5syfe3' LIMIT 1; args=(u'qnw2nbkbunbweuf4ur9hrk6n6e5syfe3',)
2015 Sep 04, Fri <10:19:26> utils.py[line:89] DEBUG (0.000) INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES ('qnw2nbkbunbweuf4ur9hrk6n6e5syfe3', 'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', '2015-09-18 10:19:26.093082'); args=(u'qnw2nbkbunbweuf4ur9hrk6n6e5syfe3', u'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', u'2015-09-18 10:19:26.093082')
2015 Sep 04, Fri <10:19:26> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE `django_session`.`session_key` = 'qnw2nbkbunbweuf4ur9hrk6n6e5syfe3'; args=(u'qnw2nbkbunbweuf4ur9hrk6n6e5syfe3',)
2015 Sep 04, Fri <10:19:26> utils.py[line:89] DEBUG (0.000) DELETE FROM `django_session` WHERE `django_session`.`session_key` IN ('qnw2nbkbunbweuf4ur9hrk6n6e5syfe3'); args=(u'qnw2nbkbunbweuf4ur9hrk6n6e5syfe3',)
2015 Sep 04, Fri <10:19:26> utils.py[line:89] DEBUG (0.000) UPDATE `auth_user` SET `last_login` = '2015-09-04 10:19:26.096405' WHERE `auth_user`.`id` = 1; args=(u'2015-09-04 10:19:26.096405', 1)
2015 Sep 04, Fri <10:19:26> utils.py[line:89] DEBUG (0.000) UPDATE `django_session` SET `session_data` = 'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', `expire_date` = '2015-09-18 10:19:26.097725' WHERE `django_session`.`session_key` = 'qnw2nbkbunbweuf4ur9hrk6n6e5syfe3'; args=(u'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', u'2015-09-18 10:19:26.097725', u'qnw2nbkbunbweuf4ur9hrk6n6e5syfe3')
2015 Sep 04, Fri <10:19:26> utils.py[line:89] DEBUG (0.000) INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES ('qnw2nbkbunbweuf4ur9hrk6n6e5syfe3', 'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2015-09-18 10:19:26.097725'); args=(u'qnw2nbkbunbweuf4ur9hrk6n6e5syfe3', u'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', u'2015-09-18 10:19:26.097725')
2015 Sep 04, Fri <10:19:26> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:26> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:26> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'qnw2nbkbunbweuf4ur9hrk6n6e5syfe3' AND `django_session`.`expire_date` > '2015-09-04 10:19:26.111313'); args=('qnw2nbkbunbweuf4ur9hrk6n6e5syfe3', u'2015-09-04 10:19:26.111313')
2015 Sep 04, Fri <10:19:26> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 04, Fri <10:19:26> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 04, Fri <10:19:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:27> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:27> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'qnw2nbkbunbweuf4ur9hrk6n6e5syfe3' AND `django_session`.`expire_date` > '2015-09-04 10:19:27.390800'); args=('qnw2nbkbunbweuf4ur9hrk6n6e5syfe3', u'2015-09-04 10:19:27.390800')
2015 Sep 04, Fri <10:19:27> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 04, Fri <10:19:27> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
2015 Sep 04, Fri <10:19:29> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:29> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:29> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'qnw2nbkbunbweuf4ur9hrk6n6e5syfe3' AND `django_session`.`expire_date` > '2015-09-04 10:19:29.400653'); args=('qnw2nbkbunbweuf4ur9hrk6n6e5syfe3', u'2015-09-04 10:19:29.400653')
2015 Sep 04, Fri <10:19:29> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 04, Fri <10:19:29> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE `django_session`.`session_key` = 'qnw2nbkbunbweuf4ur9hrk6n6e5syfe3'; args=('qnw2nbkbunbweuf4ur9hrk6n6e5syfe3',)
2015 Sep 04, Fri <10:19:29> utils.py[line:89] DEBUG (0.000) DELETE FROM `django_session` WHERE `django_session`.`session_key` IN ('qnw2nbkbunbweuf4ur9hrk6n6e5syfe3'); args=(u'qnw2nbkbunbweuf4ur9hrk6n6e5syfe3',)
2015 Sep 04, Fri <10:19:40> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:40> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:40> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`username` = 'neau'; args=(u'neau',)
2015 Sep 04, Fri <10:19:40> utils.py[line:89] DEBUG (0.000) SELECT (1) AS `a` FROM `django_session` WHERE `django_session`.`session_key` = 'h7cgsd7q0edw55ey41irbn8jhr13z4du' LIMIT 1; args=(u'h7cgsd7q0edw55ey41irbn8jhr13z4du',)
2015 Sep 04, Fri <10:19:40> utils.py[line:89] DEBUG (0.000) INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES ('h7cgsd7q0edw55ey41irbn8jhr13z4du', 'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', '2015-09-18 10:19:40.209229'); args=(u'h7cgsd7q0edw55ey41irbn8jhr13z4du', u'Y2MyM2Y3NGVhNzBhYzNkNWFiYjljNzIxYjI0ZTEwM2IyM2FhZjY3Njp7fQ==', u'2015-09-18 10:19:40.209229')
2015 Sep 04, Fri <10:19:40> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE `django_session`.`session_key` = 'h7cgsd7q0edw55ey41irbn8jhr13z4du'; args=(u'h7cgsd7q0edw55ey41irbn8jhr13z4du',)
2015 Sep 04, Fri <10:19:40> utils.py[line:89] DEBUG (0.000) DELETE FROM `django_session` WHERE `django_session`.`session_key` IN ('h7cgsd7q0edw55ey41irbn8jhr13z4du'); args=(u'h7cgsd7q0edw55ey41irbn8jhr13z4du',)
2015 Sep 04, Fri <10:19:40> utils.py[line:89] DEBUG (0.000) UPDATE `auth_user` SET `last_login` = '2015-09-04 10:19:40.212801' WHERE `auth_user`.`id` = 1; args=(u'2015-09-04 10:19:40.212801', 1)
2015 Sep 04, Fri <10:19:40> utils.py[line:89] DEBUG (0.000) UPDATE `django_session` SET `session_data` = 'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', `expire_date` = '2015-09-18 10:19:40.214350' WHERE `django_session`.`session_key` = 'h7cgsd7q0edw55ey41irbn8jhr13z4du'; args=(u'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', u'2015-09-18 10:19:40.214350', u'h7cgsd7q0edw55ey41irbn8jhr13z4du')
2015 Sep 04, Fri <10:19:40> utils.py[line:89] DEBUG (0.000) INSERT INTO `django_session` (`session_key`, `session_data`, `expire_date`) VALUES ('h7cgsd7q0edw55ey41irbn8jhr13z4du', 'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', '2015-09-18 10:19:40.214350'); args=(u'h7cgsd7q0edw55ey41irbn8jhr13z4du', u'ZTliYzNhNmMwNTRiODVlMGE3NzE2ZTE4ZTliNDZiZjQ5Y2VmOGY4Zjp7Il9hdXRoX3VzZXJfaGFzaCI6ImU1Y2ZiYzFiNDYxMmY5Y2YxNjY3NzhjMDZlODNiM2FiZmZhNzQ2OGIiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=', u'2015-09-18 10:19:40.214350')
2015 Sep 04, Fri <10:19:40> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:40> utils.py[line:89] DEBUG (0.000) SET SQL_AUTO_IS_NULL = 0; args=None
2015 Sep 04, Fri <10:19:40> utils.py[line:89] DEBUG (0.000) SELECT `django_session`.`session_key`, `django_session`.`session_data`, `django_session`.`expire_date` FROM `django_session` WHERE (`django_session`.`session_key` = 'h7cgsd7q0edw55ey41irbn8jhr13z4du' AND `django_session`.`expire_date` > '2015-09-04 10:19:40.219395'); args=('h7cgsd7q0edw55ey41irbn8jhr13z4du', u'2015-09-04 10:19:40.219395')
2015 Sep 04, Fri <10:19:40> utils.py[line:89] DEBUG (0.000) SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1; args=(1,)
2015 Sep 04, Fri <10:19:40> utils.py[line:89] DEBUG (0.000) SELECT `users_info`.`id`, `users_info`.`user_id`, `users_info`.`nickname`, `users_info`.`submit`, `users_info`.`solve`, `users_info`.`submit_in`, `users_info`.`solve_in`, `users_info`.`submit_out`, `users_info`.`solve_out`, `users_info`.`school`, `users_info`.`grade`, `users_info`.`team` FROM `users_info` WHERE `users_info`.`user_id` = 1; args=(1,)
